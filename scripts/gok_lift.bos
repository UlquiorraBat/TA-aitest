#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hull, link, 
		leg1a, leg1b, leg1c, leg1d,
		leg2a, leg2b, leg2c, leg2d, 
		leg3a, leg3b, leg3c, leg3d, 
		leg4a, leg4b, leg4c, leg4d, 
		leg5a, leg5b, leg5c, leg5d, 
		leg6a, leg6b, leg6c, leg6d,
		leg7a, leg7b, leg7c, leg7d,
		leg8a, leg8b, leg8c, leg8d,
		engine1, engine2;

static-var  unitviewer, statechg_DesiredState, statechg_StateChanging;

activatescr()
{
	if( TRUE )
	{
		turn leg1b to z-axis <-45.000000> speed <25.000000>;
		turn leg1c to z-axis <-15.000000> speed <25.000000>;
		turn leg1d to z-axis <-15.000000> speed <25.000000>;
		
		turn leg2b to z-axis <-45.000000> speed <25.000000>;
		turn leg2c to z-axis <-15.000000> speed <25.000000>;
		turn leg2d to z-axis <-15.000000> speed <25.000000>;
		
		turn leg3b to z-axis <-45.000000> speed <25.000000>;
		turn leg3c to z-axis <-15.000000> speed <25.000000>;
		turn leg3d to z-axis <-15.000000> speed <25.000000>;
		
		turn leg4b to z-axis <-45.000000> speed <25.000000>;
		turn leg4c to z-axis <-15.000000> speed <25.000000>;
		turn leg4d to z-axis <-15.000000> speed <25.000000>;
		
		turn leg5b to z-axis <45.000000> speed <25.000000>;
		turn leg5c to z-axis <15.000000> speed <25.000000>;
		turn leg5d to z-axis <15.000000> speed <25.000000>;
		
		turn leg6b to z-axis <45.000000> speed <25.000000>;
		turn leg6c to z-axis <15.000000> speed <25.000000>;
		turn leg6d to z-axis <15.000000> speed <25.000000>;
		
		turn leg7b to z-axis <45.000000> speed <25.000000>;
		turn leg7c to z-axis <15.000000> speed <25.000000>;
		turn leg7d to z-axis <15.000000> speed <25.000000>;
		
		turn leg8b to z-axis <45.000000> speed <25.000000>;
		turn leg8c to z-axis <15.000000> speed <25.000000>;
		turn leg8d to z-axis <15.000000> speed <25.000000>;

		sleep 1000;
	}
	sleep 50;
}

deactivatescr()
{
	if( TRUE )
	{
		turn leg1b to z-axis <0.000000> speed <35.000000>;
		turn leg1c to z-axis <0.000000> speed <35.000000>;
		turn leg1d to z-axis <0.000000> speed <35.000000>;
		
		turn leg2b to z-axis <0.000000> speed <35.000000>;
		turn leg2c to z-axis <0.000000> speed <35.000000>;
		turn leg2d to z-axis <0.000000> speed <35.000000>;
		
		turn leg3b to z-axis <0.000000> speed <35.000000>;
		turn leg3c to z-axis <0.000000> speed <35.000000>;
		turn leg3d to z-axis <0.000000> speed <35.000000>;
		
		turn leg4b to z-axis <0.000000> speed <35.000000>;
		turn leg4c to z-axis <0.000000> speed <35.000000>;
		turn leg4d to z-axis <0.000000> speed <35.000000>;
		
		turn leg5b to z-axis <0.000000> speed <35.000000>;
		turn leg5c to z-axis <0.000000> speed <35.000000>;
		turn leg5d to z-axis <0.000000> speed <35.000000>;
		
		turn leg6b to z-axis <0.000000> speed <35.000000>;
		turn leg6c to z-axis <0.000000> speed <35.000000>;
		turn leg6d to z-axis <0.000000> speed <35.000000>;
		
		turn leg7b to z-axis <0.000000> speed <35.000000>;
		turn leg7c to z-axis <0.000000> speed <35.000000>;
		turn leg7d to z-axis <0.000000> speed <35.000000>;
		
		turn leg8b to z-axis <0.000000> speed <35.000000>;
		turn leg8c to z-axis <0.000000> speed <35.000000>;
		turn leg8d to z-axis <0.000000> speed <35.000000>;
		
		sleep 1000;
	}
	sleep 50;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from hull;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	unitviewer = FALSE;
	call-script InitState();
	start-script SmokeUnit();
}

Demo()
{
	unitviewer = TRUE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryTransport(Func_Var_1)
{
	Func_Var_1 = link;
}

Activate()
{
	if( unitviewer )
	{
		start-script RequestState(0);
	}
}

BeginTransport(Func_Var_1)
{
	move link to y-axis [8.000000] - Func_Var_1 now;
	move link to z-axis [16.000000] now;
	start-script RequestState(0);
}

Deactivate()
{
	if( unitviewer )
	{
		start-script RequestState(1);
		move link to y-axis [0.000000] now;
		move link to z-axis [0.000000] now;
	}
}

EndTransport()
{
	start-script RequestState(1);
}

StartMoving()
{
	signal 2;
}


StopMoving()
{
	signal 2;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode hull type NOHEATCLOUD;
		explode leg1b type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode leg2b type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode leg6b type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode leg5c type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode leg4c type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode hull type NOHEATCLOUD;
	explode leg1b type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg2b type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg6b type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg5c type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg4c type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
