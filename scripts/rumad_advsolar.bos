#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, panels, socle,
		turn1, turn2, turn3, turn4, turn5, turn6,
		panel1, panel2, panel3, panel4, panel5, panel6;

static-var  Static_Var_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATION		4

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{

	if( Static_Var_1 )
	{
		set ACTIVATION to 0;
		return (0);
	}
	
	turn panel1 to x-axis <-90.0> speed <30.000000>;
	turn panel2 to x-axis <-90.0> speed <30.000000>;
	turn panel3 to x-axis <-90.0> speed <30.000000>;
	turn panel4 to x-axis <-90.0> speed <30.000000>;
	turn panel5 to x-axis <-90.0> speed <30.000000>;
	turn panel6 to x-axis <-90.0> speed <30.000000>;
		
	set ARMORED to 0;
	set YARD_OPEN to 0;
}

Stop()
{
	
	turn panel1 to x-axis <0.0> speed <30.000000>;
	turn panel2 to x-axis <0.0> speed <30.000000>;
	turn panel3 to x-axis <0.0> speed <30.000000>;
	turn panel4 to x-axis <0.0> speed <30.000000>;
	turn panel5 to x-axis <0.0> speed <30.000000>;
	turn panel6 to x-axis <0.0> speed <30.000000>;
	wait-for-turn panel1 around x-axis;
	
	set ARMORED to 1;
	set YARD_OPEN to 1;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

HitByWeapon(anglex, anglez)
{
	if( get ACTIVATION )
	{
		Static_Var_1 = 1;
	}
	if( Static_Var_1 )
	{
		signal SIG_ACTIVATION;
		set-signal-mask SIG_ACTIVATION;
		set ACTIVATION to 0;
		sleep 8000;
		Static_Var_1 = 0;
		set ACTIVATION to 100;
	}
}


Create()
{
	Static_Var_1 = 0;

	turn turn1 to y-axis <0.0> now;
	turn turn2 to y-axis <60.0> now;
	turn turn3 to y-axis <120.0> now;
	turn turn4 to y-axis <180.0> now;
	turn turn5 to y-axis <240.0> now;
	turn turn6 to y-axis <300.0> now;
	
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	if( Static_Var_1 )
	{
		set ACTIVATION to 0;
		return (0);
	}
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode panel1 type NOHEATCLOUD;
		explode panel2 type NOHEATCLOUD;
		explode panel3 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode panel1 type NOHEATCLOUD | FALL;
		explode panel2 type NOHEATCLOUD | FALL;
		explode panel3 type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode panel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode panel2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode panel3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
