#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, torax, abdomen, flame,
		turret, sleeves, barrels, flare1, flare2,
	   patte10, patte11, patte12, patte13, patte14, stomp1, patte20, patte21, patte22,
       patte23, patte24, stomp2, 
       patte30, patte31, patte32, patte33, patte34, stomp3, 
       patte40, patte41, patte42, patte43, patte44, stomp4, 
       patte50, patte51, patte52, patte53, patte54, stomp5, 
       patte60, patte61, patte62, patte63, patte64, stomp6,
       basket1, basket2, basket3, basket4, basket5, basket6;

static-var  bMoving, bAiming, gun_1;

// Signal definitions
#define SIG_AIM_1			2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_MOVE			16

lua_FlameShot(Func_Var_1)
{
}

PilotLight()
{
	while( TRUE)
	{
		if (! bAiming )
		{
			emit-sfx 1024 from flame;
		}
		sleep 225;
	}
}

AbdomenControl(Func_Var_1)
{
	while( TRUE )
	{		
		if ( bAiming )
		{		
			turn abdomen to x-axis <-25.000000> speed <12.000000>;			
		}		
		else		
		{		
			turn abdomen to x-axis <0.000000> speed <3.000000>;		
		}
		
		sleep 350;
	}
}

TexasRanger(Func_Var_1, Func_Var_2)
{
	while( !bMoving )
	{
		sleep 100;
	}
	while( TRUE )
	{
		turn patte60 to y-axis <-1.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte50 to y-axis <45.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte40 to y-axis <-16.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte10 to y-axis <-14.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte21 to z-axis <30.000000> speed <30.000000> * <5.494505> / <2.197802>;
		turn patte22 to z-axis <45.000000> speed <45.000000> * <5.494505> / <2.197802>;
		turn patte23 to z-axis <7.000000> speed <7.000000> * <5.494505> / <2.197802>;
		sleep 400;
		
		while( !bMoving )
		{
			sleep 100;
		}
		
		turn patte31 to z-axis <0.000000> speed <30.000000> * <5.494505> / <2.197802>;
		turn patte32 to z-axis <0.000000> speed <45.000000> * <5.494505> / <2.197802>;
		turn patte33 to z-axis <0.000000> speed <7.000000> * <5.494505> / <2.197802>;
		turn patte20 to y-axis <45.000000> speed <60.000000> * <2.747253> / <2.197802>;
		sleep 400;
		
		while( !bMoving )
		{
			sleep 100;
		}
		
		turn patte30 to y-axis <-14.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte60 to y-axis <-16.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte40 to y-axis <-30.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte10 to y-axis <1.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte51 to z-axis <0.000000> - <30.000000> speed <30.000000> * <5.494505> / <2.197802>;
		turn patte52 to z-axis <0.000000> - <45.000000> speed <45.000000> * <5.494505> / <2.197802>;
		turn patte53 to z-axis <0.000000> - <7.000000> speed <7.000000> * <5.494505> / <2.197802>;
		sleep 400;

		while( !bMoving )
		{
			sleep 100;
		}
		
		turn patte21 to z-axis <0.000000> speed <30.000000> * <5.494505> / <2.197802>;
		turn patte22 to z-axis <0.000000> speed <45.000000> * <5.494505> / <2.197802>;
		turn patte23 to z-axis <0.000000> speed <7.000000> * <5.494505> / <2.197802>;
		turn patte50 to y-axis <-15.000000> speed <60.000000> * <2.747253> / <2.197802>;
		sleep 400;
		
		while( !bMoving )
		{
			sleep 100;
		}
		
		turn patte20 to y-axis <29.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte60 to y-axis <-31.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte30 to y-axis <1.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte10 to y-axis <15.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte41 to z-axis <30.000000> speed <30.000000> * <5.494505> / <2.197802>;
		turn patte42 to z-axis <45.000000> speed <45.000000> * <5.494505> / <2.197802>;
		turn patte43 to z-axis <7.000000> speed <7.000000> * <5.494505> / <2.197802>;
		sleep 400;
		
		while( !bMoving )
		{
			sleep 100;
		}
		
		turn patte51 to z-axis <0.000000> speed <30.000000> * <5.494505> / <2.197802>;
		turn patte52 to z-axis <0.000000> speed <45.000000> * <5.494505> / <2.197802>;
		turn patte53 to z-axis <0.000000> speed <7.000000> * <5.494505> / <2.197802>;
		turn patte40 to y-axis <30.000000> speed <60.000000> * <2.747253> / <2.197802>;
		sleep 400;

		while( !bMoving )
		{
			sleep 100;
		}
		
		turn patte50 to y-axis <1.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte60 to y-axis <-45.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte30 to y-axis <16.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte20 to y-axis <14.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte11 to z-axis <0.000000> - <30.000000> speed <30.000000> * <5.494505> / <2.197802>;
		turn patte12 to z-axis <0.000000> - <45.000000> speed <45.000000> * <5.494505> / <2.197802>;
		turn patte13 to z-axis <0.000000> - <7.000000> speed <7.000000> * <5.494505> / <2.197802>;
		sleep 400;
		
		while( !bMoving )
		{
			sleep 100;
		}
		
		turn patte41 to z-axis <0.000000> speed <30.000000> * <5.494505> / <2.197802>;
		turn patte42 to z-axis <0.000000> speed <45.000000> * <5.494505> / <2.197802>;
		turn patte43 to z-axis <0.000000> speed <7.000000> * <5.494505> / <2.197802>;
		turn patte10 to y-axis <-45.000000> speed <60.000000> * <2.747253> / <2.197802>;
		sleep 400;
		
		while( !bMoving )
		{
			sleep 100;
		}
		turn patte40 to y-axis <14.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte30 to y-axis <30.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte20 to y-axis <-1.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte50 to y-axis <16.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte61 to z-axis <30.000000> speed <30.000000> * <5.494505> / <2.197802>;
		turn patte62 to z-axis <45.000000> speed <45.000000> * <5.494505> / <2.197802>;
		turn patte63 to z-axis <7.000000> speed <7.000000> * <5.494505> / <2.197802>;
		sleep 400;
		
		while( !bMoving )
		{
			sleep 100;
		}
		
		turn patte11 to z-axis <0.000000> speed <30.000000> * <5.494505> / <2.197802>;
		turn patte12 to z-axis <0.000000> speed <45.000000> * <5.494505> / <2.197802>;
		turn patte13 to z-axis <0.000000> speed <7.000000> * <5.494505> / <2.197802>;
		turn patte60 to y-axis <15.000000> speed <60.000000> * <2.747253> / <2.197802>;
		sleep 400;
		
		while( !bMoving )
		{
			sleep 100;
		}
		
		turn patte10 to y-axis <-29.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte20 to y-axis <-15.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte50 to y-axis <31.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte40 to y-axis <-1.000000> speed <15.000000> * <2.747253> / <2.197802>;
		turn patte31 to z-axis <0.000000> - <30.000000> speed <30.000000> * <5.494505> / <2.197802>;
		turn patte32 to z-axis <0.000000> - <45.000000> speed <45.000000> * <5.494505> / <2.197802>;
		turn patte33 to z-axis <0.000000> - <7.000000> speed <7.000000> * <5.494505> / <2.197802>;
		sleep 400;
		
		while( !bMoving )
		{
			sleep 100;
		}
		
		turn patte61 to z-axis <0.000000> speed <30.000000> * <5.494505> / <2.197802>;
		turn patte62 to z-axis <0.000000> speed <45.000000> * <5.494505> / <2.197802>;
		turn patte63 to z-axis <0.000000> speed <7.000000> * <5.494505> / <2.197802>;
		turn patte30 to y-axis <-30.000000> speed <60.000000> * <2.747253> / <2.197802>;
		sleep 400;
		
		while( !bMoving )
		{
			sleep 100;
		}
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	bMoving = TRUE;
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	bMoving = FALSE;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{

	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	
	start-script TexasRanger();
	start-script PilotLight();
	start-script AbdomenControl();
	
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torax;
			emit-sfx smoketype from Abdomen;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	turn patte20 to y-axis <45.000000> now;
	turn patte60 to y-axis <-45.000000> now;
	turn patte10 to y-axis <-45.000000> now;
	turn patte50 to y-axis <45.000000> now;
	hide flame;	
	move flame to y-axis [-4.0] now;
	bMoving = FALSE;
	bAiming = FALSE;
	gun_1 = 0;
	start-script SmokeUnit();
	
}

RestoreAfterDelay()
{
	sleep 6000;
	turn turret to y-axis <0.> speed <30.>;
	turn sleeves to x-axis <0.> speed <30.>;
	bAiming = FALSE;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	bAiming = TRUE;
	turn turret to y-axis heading speed <60.000000>;
	turn sleeves to x-axis <0.000000> - pitch speed <60.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
}

FirePrimary()
{
	++gun_1;
	if( gun_1 == 2 )
	{
		gun_1 = 0;
	}
}


AimFromSecondary(piecenum)
{
	piecenum = flame;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	return (1);
}

QuerySecondary(piecenum)
{
	piecenum = flame;
}

Shot2()
{
	call-script lua_FlameShot(2);
	return (1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode torax type NOHEATCLOUD;
		explode abdomen type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode sleeves type NOHEATCLOUD;
		explode barrels type NOHEATCLOUD;
		explode patte10 type NOHEATCLOUD | SHATTER;
		explode patte40 type NOHEATCLOUD | SHATTER;
		explode patte50 type NOHEATCLOUD | SHATTER;
		explode patte31 type NOHEATCLOUD | SHATTER;
		explode patte61 type NOHEATCLOUD | SHATTER;
		explode patte12 type NOHEATCLOUD | SHATTER;
		explode patte42 type NOHEATCLOUD | SHATTER;
		explode patte52 type NOHEATCLOUD | SHATTER;
		explode patte23 type NOHEATCLOUD | SHATTER;
		explode patte14 type NOHEATCLOUD | SHATTER;
		explode patte44 type NOHEATCLOUD | SHATTER;
		explode patte54 type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode torax type NOHEATCLOUD;
	explode abdomen type NOHEATCLOUD;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE;
	explode sleeves type NOHEATCLOUD | FALL | SMOKE | FIRE;
	explode barrels type NOHEATCLOUD | FALL | SMOKE | FIRE;
	explode patte10 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | SHATTER;
	explode patte40 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | SHATTER;
	explode patte50 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | SHATTER;
	explode patte31 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | SHATTER;
	explode patte61 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | SHATTER;
	explode patte12 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | SHATTER;
	explode patte42 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | SHATTER;
	explode patte52 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | SHATTER;
	explode patte23 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | SHATTER;
	explode patte14 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | SHATTER;
	explode patte44 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | SHATTER;
	explode patte54 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | SHATTER;
	return (corpsetype);
}
