#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, pitchturret, turret, door1, door2,
		flare1, flare2, flare3, flare4, flare5, flare6, flare7, flare8;

static-var  restore_delay, msl_1, bOpened ;

// Signal definitions
#define SIG_AIM				2
#define SIG_DEPLOY			4

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from Base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

FClose()
{
	signal SIG_DEPLOY;
	set-signal-mask SIG_DEPLOY;
	bOpened = 0;
	
	turn turret to y-axis <0.000000> speed <80.000000>;
	wait-for-turn turret around y-axis;
	turn pitchturret to x-axis <90.000000> speed <80.000000>;
	wait-for-turn pitchturret around x-axis;	
	
	move turret to y-axis [-17.0] speed [20.000000];
	wait-for-move turret along y-axis;
	
	turn door1 to z-axis <-90.000000> speed <309.000000>;
	turn door2 to z-axis <90.000000> speed <308.000000>;
	wait-for-move door1 along z-axis;

	set ARMORED to 1;
}

FCloseAfterDelay()
{
	set-signal-mask SIG_DEPLOY;
	sleep 5000;
	set-signal-mask 0;
	start-script FClose();
}

FOpen()
{
	signal SIG_DEPLOY;
	set-signal-mask SIG_DEPLOY;
	set ARMORED to 0;
	
	turn door1 to z-axis <0.000000> speed <300.000000>;
	turn door2 to z-axis <0.000000> speed <300.000000>;
	wait-for-move door1 along z-axis;
	
	move turret to y-axis [0.000000] speed [20.000000];
	wait-for-move turret along y-axis;
	
	turn pitchturret to x-axis <0.0> speed <200.0>;
	wait-for-turn pitchturret around x-axis;
		
	bOpened = 1;
	start-script FCloseAfterDelay();
}

Create()
{
	msl_1 = 1;
	bOpened = 1;
	restore_delay = 2000;
	start-script FCloseAfterDelay();
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <80.000000>;
	turn pitchturret to x-axis <0.000000> speed <80.000000>;
}

QueryPrimary(piecenum)
{
	if ( msl_1 == 1)
	{
		piecenum = flare1;
	}
	if ( msl_1 == 2)
	{
		piecenum = flare2;
	}
	if ( msl_1 == 3)
	{
		piecenum = flare3;
	}
	if ( msl_1 == 4)
	{
		piecenum = flare4;
	}
	if ( msl_1 == 5)
	{
		piecenum = flare5;
	}
	if ( msl_1 == 6)
	{
		piecenum = flare6;
	}
	if ( msl_1 == 7)
	{
		piecenum = flare7;
	}
	if ( msl_1 == 8)
	{
		piecenum = flare8;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = pitchturret;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	start-script FOpen();
	
	while( !bOpened )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <120.000000>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	while(TRUE)
	{
		sleep 125;	
		++msl_1;
		if (msl_1 == 5)
		{
			return (0);	
		}
		if (msl_1 == 9)
		{
			msl_1 = 1;
			return (0);		
		}
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode pitchturret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD | SHATTER;
		explode turret type NOHEATCLOUD | SHATTER;
		explode pitchturret type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode pitchturret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
