#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, icbm, door1, door2, door3, door4, fire,
		plate1, plate2, plate3, plate4, plate5,
		land1, land2, land3, land4, land5,
		circle1, circle2, circle3, circle4, circle5,
		node, sphere, radar, wake1, wake2, wake3,
		top, nose;
		

static-var  restore_delay, statechg_DesiredState, statechg_StateChanging, gun_1;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_RADAR			8


RockOnWaves(Func_Var_1, Func_Var_2, Func_Var_3)
{
	Func_Var_1 = -18;
	Func_Var_2 = -18;
	while( TRUE )
	{
		while( get ABS(Func_Var_2) < 202 )
		{
			Func_Var_3 = 227 - get ABS(Func_Var_2);
			turn base to x-axis Func_Var_2 speed Func_Var_3 * <0.010989>;
			wait-for-turn base around x-axis;
			Func_Var_2 = Func_Var_2 + Func_Var_1;
		}
		Func_Var_1 = 0 - Func_Var_1;
		Func_Var_2 = Func_Var_2 + Func_Var_1 + Func_Var_1;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Activatescr()
{
	if( TRUE )
	{
		turn door1 to x-axis <0.0> speed <15.000000>;
		turn door2 to z-axis <0.000000> speed <15.000000>;
		turn door3 to x-axis <0.000000> speed <15.000000>;
		turn door4 to z-axis <0.000000> speed <15.000000>;
		sleep 7500;
		gun_1 = 1;
	}
	sleep 25;
}

Deactivatescr()
{
	if( TRUE )
	{
		gun_1 = 0;
		turn door1 to x-axis <90.0> speed <50.000000>;
		turn door2 to z-axis <-90.0> speed <50.000000>;
		turn door3 to x-axis <-90.0> speed <50.000000>;
		turn door4 to z-axis <90.0> speed <50.000000>;
		sleep 300;
	}
	sleep 15;
}

Go()
{
	show icbm;
	call-script Activatescr();
}

Stop()
{
	sleep 4000;
	call-script Deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	gun_1 = 0;
	turn door1 to x-axis <90.0> now;
	turn door2 to z-axis <-90.0> now;
	turn door3 to x-axis <-90.0> now;
	turn door4 to z-axis <90.0> now;

	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	signal SIG_RADAR;
	set-signal-mask SIG_RADAR;
	move sphere to y-axis [0.] speed [2.];
	sleep 250;
	move sphere to y-axis [0.] speed [4.];
	sleep 250;
	move node to y-axis [0.] speed [2.];
	sleep 250;
	spin node around y-axis speed <90.> accelerate <2.>;
	move node to y-axis [0.] speed [4.];
	sleep 250;
	move node to y-axis [0.] speed [6.];
	sleep 250;
	move node to y-axis [0.] speed [8.];
	sleep 250;
	move node to y-axis [0.] speed [6.];
	sleep 250;
	move node to y-axis [0.] speed [4.];
	sleep 250;
	move node to y-axis [0.] speed [2.];
}

Deactivate()
{
	signal SIG_RADAR;
	set-signal-mask SIG_RADAR;
	spin node around y-axis speed <0.> accelerate <-2.>;
	move node to y-axis [-10.] speed [8.];
	sleep 250;
	move node to y-axis [-10.] speed [6.];
	move sphere to y-axis [-12.] speed [4.];
	sleep 250;
	move node to y-axis [-8.] speed [4.];
	sleep 250;
	move node to y-axis [-8.] speed [2.];
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-1.000000> speed <1.000000>;
		move base to y-axis [0.229999] speed [0.169995];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.000000> speed <1.000000>;
		move base to y-axis [0.000000] speed [0.169995];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var Func_Var_1;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake3;
		sleep 350;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.000000> speed <1.000000>;
	move base to y-axis [0.000000] speed [0.169995];
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryLandingPad(Func_Var_1, Func_Var_2, Func_Var_3, Func_Var_4, Func_Var_5)
{
	Func_Var_1 = land1;
	Func_Var_2 = land2;
	Func_Var_3 = land3;
	Func_Var_4 = land4;
	Func_Var_5 = land5;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimWeapon3(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( gun_1 == 0 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon3()
{
	emit-sfx 1024 from fire;
	sleep 2000;
	hide icbm;
	gun_1 = 0;
	start-script RequestState(1);
}

QueryWeapon3(piecenum)
{
	piecenum = fire;
}

AimFromWeapon3(piecenum)
{
	piecenum = fire;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode radar type NOHEATCLOUD;
		explode plate1 type NOHEATCLOUD;
		explode plate2 type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door3 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode radar type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode plate1 type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode plate2 type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode door1 type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode door3 type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode radar type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode nose type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode plate1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode plate2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode door1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode door3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
