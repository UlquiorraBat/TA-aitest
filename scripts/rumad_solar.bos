#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pelvis, post,
		luparm, lloarm, lhand, ruparm, rloarm, rhand,
		up, lup, rup,
		bottom, lbottom, rbottom,
		right, rright, lright,
		left, rleft, lleft;

static-var  Static_Var_1, Static_Var_2, bMoving, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_MOVE			2

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from pelvis;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Walk()
{
	if( TRUE )
	{
		turn luparm to x-axis <20.000000> speed <50.000000>;
		turn ruparm to x-axis <-20.000000> speed <50.000000>;
		turn lhand to x-axis <-15.005495> speed <70.000000>;
		turn rhand to x-axis <5.000000> speed <50.000000>;
		turn rloarm to x-axis <-10.000000> speed <70.000000>;
		sleep 505;
		turn lhand to x-axis <20.005495> speed <100.000000>;
		turn rhand to x-axis <10.000000> speed <50.000000>;
		turn rloarm to x-axis <20.005495> speed <100.000000>;
		sleep 600;
		turn pelvis to z-axis <4.000000> speed <3.000000>;
	}
	if( TRUE )
	{
		turn luparm to x-axis <-20.005495> speed <50.000000>;
		turn ruparm to x-axis <20.005495> speed <50.000000>;
		turn rhand to x-axis <-10.005495> speed <130.000000>;
		turn lloarm to x-axis <-10.005495> speed <100.000000>;
		sleep 1050;
		turn rhand to x-axis <20.005495> speed <100.000000>;
		turn lloarm to x-axis <20.005495> speed <100.000000>;
		sleep 600;
		turn pelvis to z-axis <-4.000000> speed <8.000000>;
	}
	while( TRUE )
	{
		if( TRUE )
		{
			turn pelvis to y-axis <-5.000000> speed <12.000000>;
			turn pelvis to x-axis <-2.000000> speed <6.000000>;
			turn luparm to x-axis <40.005495> speed <50.000000>;
			turn ruparm to x-axis <-40.005495> speed <50.000000>;
			turn lhand to x-axis <-20.005495> speed <130.000000>;
			turn rloarm to x-axis <-10.005495> speed <100.000000>;
			sleep 1050;
			turn lhand to x-axis <20.005495> speed <100.000000>;
			turn rhand to x-axis <20.005495> speed <70.000000>;
			turn rloarm to x-axis <10.005495> speed <100.000000>;
			sleep 600;
			turn pelvis to z-axis <4.000000> speed <8.000000>;
		}
		if( TRUE )
		{
			turn pelvis to y-axis <4.000000> speed <12.000000>;
			turn pelvis to x-axis <6.000000> speed <6.000000>;
			turn luparm to x-axis <-40.005495> speed <50.000000>;
			turn ruparm to x-axis <40.005495> speed <50.000000>;
			turn rhand to x-axis <-20.005495> speed <130.000000>;
			turn lloarm to x-axis <-10.005495> speed <100.000000>;
			sleep 1050;
			turn rhand to x-axis <40.005495> speed <100.000000>;
			turn lloarm to x-axis <10.005495> speed <100.000000>;
			sleep 600;		
			turn pelvis to z-axis <-3.000000> speed <8.000000>;
		}
	}
}

StopWalk()
{
	turn luparm to x-axis <0.000000> speed <50.000000>;
	turn ruparm to x-axis <0.000000> speed <50.000000>;
	turn lloarm to x-axis <0.000000> speed <100.000000>;
	turn rloarm to x-axis <0.000000> speed <100.000000>;
	turn pelvis to y-axis <0.000000> speed <100.000000>;
	turn pelvis to x-axis <0.000000> speed <20.000000>;
	move pelvis to y-axis [0.000000] speed [20.000000];
	turn pelvis to z-axis <0.000000> speed <20.000000>;
	turn rhand to x-axis <0.000000> speed <100.000000>;
	turn lhand to x-axis <0.000000> speed <100.000000>;
	turn pelvis to x-axis <10.000000> speed <48.000000>;
	turn pelvis to x-axis <-3.000000> speed <48.000000>;
	turn pelvis to x-axis <0.000000> speed <48.000000>;
	wait-for-turn pelvis around x-axis;
	sleep 20;
}

Go()
{

	if( Static_Var_1 )
	{
		set ACTIVATION to 0;
		return (0);
	}
	
	turn up to x-axis <0.0> speed <30.000000>;
	turn bottom to x-axis <0.0> speed <30.000000>;
	turn right to z-axis <0.0> speed <30.000000>;
	turn left to z-axis <0.0> speed <30.000000>;
	
	wait-for-turn up around x-axis;
	
	turn rleft to x-axis <0.0> speed <30.000000>;
	turn lleft to x-axis <0.0> speed <30.000000>;
	turn rright to x-axis <0.0> speed <30.000000>;
	turn lright to x-axis <0.0> speed <30.000000>;
	
	turn rup to z-axis <0.0> speed <30.000000>;
	turn lup to z-axis <0.0> speed <30.000000>;
	turn rbottom to z-axis <0.0> speed <30.000000>;
	turn lbottom to z-axis <0.0> speed <30.000000>;
	
	set ARMORED to 0;
	set YARD_OPEN to 0;
}

Stop()
{
	turn rleft to x-axis <-90.0> speed <30.000000>;
	turn lleft to x-axis <90.0> speed <30.000000>;
	turn rright to x-axis <90.0> speed <30.000000>;
	turn lright to x-axis <-90.0> speed <30.000000>;
	turn rup to z-axis <90.0> speed <30.000000>;
	turn lup to z-axis <-90.0> speed <30.000000>;
	turn rbottom to z-axis <-90.0> speed <30.000000>;
	turn lbottom to z-axis <90.0> speed <30.000000>;
	
	wait-for-turn rleft around x-axis;
	
	turn up to x-axis <90.0> speed <30.000000>;
	turn bottom to x-axis <-90.0> speed <30.000000>;
	turn right to z-axis <-90.0> speed <30.000000>;
	turn left to z-axis <90.0> speed <30.000000>;
	
	set ARMORED to 1;
	set YARD_OPEN to 1;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

HitByWeapon(anglex, anglez)
{
	if( get ACTIVATION )
	{
		Static_Var_1 = 1;
	}
	if( Static_Var_1 )
	{
		signal 2;
		set-signal-mask 2;
		set ACTIVATION to 0;
		sleep 8000;
		Static_Var_1 = 0;
		set ACTIVATION to 100;
	}
}

Create()
{
	Static_Var_1 = 0;
	
	turn up to x-axis <90.0> now;
	turn bottom to x-axis <-90.0> now;
	turn right to z-axis <-90.0> now;
	turn left to z-axis <90.0> now;
	
	turn rleft to x-axis <-90.0> now;
	turn lleft to x-axis <90.0> now;
	turn rright to x-axis <90.0> now;
	turn lright to x-axis <-90.0> now;
	
	turn rup to z-axis <90.0> now;
	turn lup to z-axis <-90.0> now;
	turn rbottom to z-axis <-90.0> now;
	turn lbottom to z-axis <90.0> now;
	
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	if( Static_Var_1 )
	{
		set ACTIVATION to 0;
		return (0);
	}
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script Walk();
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
	start-script StopWalk();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode pelvis type NOHEATCLOUD;
		explode luparm type NOHEATCLOUD;
		explode lloarm type NOHEATCLOUD;
		explode lhand type NOHEATCLOUD;
		explode ruparm type NOHEATCLOUD;
		explode rloarm type NOHEATCLOUD;
		explode rhand type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode pelvis type NOHEATCLOUD;
		explode luparm type NOHEATCLOUD | FALL;
		explode lloarm type NOHEATCLOUD | FALL;
		explode lhand type NOHEATCLOUD | FALL;
		explode ruparm type NOHEATCLOUD | FALL;
		explode rloarm type NOHEATCLOUD | FALL;
		explode rhand type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode pelvis type NOHEATCLOUD;
	explode luparm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lloarm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lhand type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode ruparm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rloarm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rhand type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
