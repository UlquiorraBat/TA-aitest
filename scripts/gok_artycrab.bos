#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, ground, turret, pitchturret, 
		barrel, bar1, bar2, bar2b, bar3, bar3b, fire,
		leg1, leg2, leg3, leg4;

static-var  bMoving, Static_Var_2;

// Signal definitions
#define SIG_AIM				2

walkscr()
{
	while( bMoving )
	{
		if( bMoving )
		{
			turn leg1 to y-axis <43.005495> speed <30.000000>;
			turn leg1 to y-axis <0.000000> speed <30.000000>;
			turn leg1 to z-axis <0.000000> speed <30.000000>;
			turn leg1 to z-axis <0.000000> speed <30.000000>;
			turn leg2 to z-axis <0.000000> speed <30.000000>;
			turn leg2 to z-axis <31.005495> speed <30.000000>;
			turn leg3 to y-axis <34.005495> speed <30.000000>;
			turn leg3 to y-axis <34.005495> speed <30.000000>;
			turn leg3 to z-axis <31.005495> speed <30.000000>;
			turn leg3 to z-axis <0.000000> speed <30.000000>;
			turn leg4 to y-axis <-40.005495> speed <30.000000>;
			turn leg4 to y-axis <-40.005495> speed <30.000000>;
			turn leg4 to z-axis <-31.005495> speed <30.000000>;
			turn leg4 to z-axis <0.000000> speed <30.000000>;
			turn base to z-axis <2.000000> speed <5.000000>;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to z-axis <39.005495> speed <30.000000>;
			turn leg2 to y-axis <34.005495> speed <30.000000>;
			turn leg2 to z-axis <31.005495> speed <30.000000>;
			turn leg3 to y-axis <0.000000> speed <30.000000>;
			turn leg3 to z-axis <0.000000> speed <30.000000>;
			turn leg4 to y-axis <0.000000> speed <30.000000>;
			turn base to z-axis <-2.000000> speed <5.000000>;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <55.005495> speed <30.000000>;
			turn leg1 to z-axis <31.005495> speed <30.000000>;
			turn leg2 to y-axis <34.005495> speed <30.000000>;
			turn leg2 to z-axis <0.000000> speed <30.000000>;
			turn leg3 to z-axis <31.005495> speed <30.000000>;
			turn leg4 to y-axis <0.000000> speed <30.000000>;
			turn leg4 to z-axis <-31.005495> speed <30.000000>;
			turn base to z-axis <2.000000> speed <5.000000>;
			sleep 200;
		}
		turn leg1 to y-axis <46.005495> speed <30.000000>;
		turn leg1 to z-axis <0.000000> speed <30.000000>;
		turn leg2 to y-axis <0.000000> speed <30.000000>;
		turn leg2 to z-axis <0.000000> speed <30.000000>;
		turn leg3 to y-axis <37.005495> speed <30.000000>;
		turn leg3 to z-axis <34.005495> speed <30.000000>;
		turn leg4 to y-axis <-40.005495> speed <30.000000>;
		turn leg4 to z-axis <-31.005495> speed <30.000000>;
		turn base to z-axis <-2.000000> speed <5.000000>;
		sleep 200;
	}
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walkscr();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
			turn leg1 to y-axis <0.000000> speed <35.000000>;
			turn leg1 to z-axis <0.000000> speed <25.000000>;
			turn leg2 to y-axis <0.000000> speed <35.000000>;
			turn leg2 to z-axis <0.000000> speed <25.000000>;
			turn leg3 to y-axis <0.000000> speed <35.000000>;
			turn leg3 to z-axis <0.000000> speed <25.000000>;
			turn leg4 to y-axis <0.000000> speed <35.000000>;
			turn leg4 to z-axis <0.000000> speed <25.000000>;
			sleep 100;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script MotionControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide fire;
	turn bar2 to z-axis <-120.> now;
	turn bar3 to z-axis <120.> now;
	bMoving = FALSE;
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

RestoreAfterDelay()
{
	sleep 3000;
	turn turret to y-axis <0.000000> speed <70.000000>;
	turn pitchturret to x-axis <0.000000> speed <50.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <50.>;
	turn pitchturret to x-axis <0.> - pitch speed <75.>;
	wait-for-turn turret around y-axis;
	wait-for-turn pitchturret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 from fire;
	move barrel to z-axis [-0.6] speed [25.];
	sleep 100;
	turn bar1 to x-axis <-30.> speed <150.>;
	turn bar2b to x-axis <-30.> speed <150.>;
	turn bar3b to x-axis <-30.> speed <150.>;
	sleep 100;
	turn bar1 to x-axis <-30.> speed <120.>;
	turn bar2b to x-axis <-30.> speed <120.>;
	turn bar3b to x-axis <-30.> speed <120.>;
	sleep 100;
	turn bar1 to x-axis <-30.> speed <60.>;
	turn bar2b to x-axis <-30.> speed <60.>;
	turn bar3b to x-axis <-30.> speed <60.>;
	sleep 25;
	move barrel to z-axis [0.] speed [0.5];
	turn bar1 to x-axis <0.> speed <14.>;
	turn bar2b to x-axis <0.> speed <14.>;
	turn bar3b to x-axis <0.> speed <14.>;
	sleep 250;
}


AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = fire;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode ground type NOHEATCLOUD;
		explode leg1 type NOHEATCLOUD;
		explode leg2 type NOHEATCLOUD;
		explode leg3 type NOHEATCLOUD;
		explode leg4 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode ground type NOHEATCLOUD;
		explode leg1 type NOHEATCLOUD | FALL;
		explode leg2 type NOHEATCLOUD;
		explode leg3 type NOHEATCLOUD | FALL;
		explode leg4 type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode ground type NOHEATCLOUD | FALL;
	explode leg1 type NOHEATCLOUD | FALL;
	explode leg2 type NOHEATCLOUD | FALL;
	explode leg3 type NOHEATCLOUD | FALL;
	explode leg4 type NOHEATCLOUD | FALL;
	return (corpsetype);
}
