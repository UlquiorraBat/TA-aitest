#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, minigun, sleeve, flare, rturret, lturret, rflare, lflare,
		wakes, wake1, wake2, wake3, wake4, wake5, wake6, wake7, wake8;

static-var  Static_Var_1, restore_delay, gun, bAiming;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_MOVE			16

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 == 1 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		if( Static_Var_1 == 2 )
		{
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		sleep 300;
	}
}

StopMoving()
{
	sleep 150;
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
}

Create()
{	
	restore_delay = 4500;
	start-script SmokeUnit();
}

RestorePrimary()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <30.000000>;
	turn sleeve to x-axis <0.000000> speed <20.000000>;
}

RestoreSecondary()
{
	sleep restore_delay / 1.5;
	turn rturret to y-axis <0.> speed <65.000000>;
}

RestoreTertiary()
{
	sleep restore_delay / 1.5;
	turn lturret to y-axis <0.> speed <65.000000>;
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <50.000000>;
	turn sleeve to x-axis <0.> - pitch speed <25.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestorePrimary();
	return (1);
}

FirePrimary()
{
	turn minigun to z-axis <0.000000> now;
	turn minigun to z-axis <90.000000> speed <115.000000>;		
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}


AimSecondary(heading, pitch)
{	
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn rturret to y-axis heading speed <120.000000>;
	wait-for-turn rturret around y-axis;
	start-script RestoreSecondary();
	return (1);
}

AimFromSecondary(piecenum)
{
	piecenum = rturret;
}

QuerySecondary(piecenum)
{
	piecenum = rflare;
}

AimTertiary(heading, pitch)
{	
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn lturret to y-axis heading speed <120.000000>;
	wait-for-turn lturret around y-axis;
	start-script RestoreTertiary();
	return (1);
}

AimFromTertiary(piecenum)
{
	piecenum = lturret;
}

QueryTertiary(piecenum)
{
	piecenum = lflare;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode sleeve type NOHEATCLOUD;
		explode minigun type NOHEATCLOUD;
		explode rturret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lturret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | FALL;
		explode sleeve type NOHEATCLOUD | FALL;
		explode minigun type NOHEATCLOUD | FALL;
		explode rturret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lturret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;

		return (corpsetype);
	}
	corpsetype = 3;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode sleeve type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode minigun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rturret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lturret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
}
