#define TA

#include "sfxtype.h"
#include "exptype.h"
 
piece base, body, barrel, lathe1, lathe2, leg1, leg2, leg3, leg4, leg5, leg6;

static-var bMoving, restore_delay, spray;
	
// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4

walk()
{
	while (bMoving )
		{
		if (bMoving )
			{
				
				turn leg1 to y-axis <0> speed <125>;				
				turn leg1 to z-axis <0> speed <25>;				
				turn leg2 to z-axis <31> speed <125>;				
				turn leg3 to y-axis <34> speed <25>;			
				turn leg3 to z-axis <0> speed <125>;				
				turn leg4 to y-axis <-40> speed <25>;				
				turn leg4 to z-axis <-0> speed <125>;				
				turn leg5 to y-axis <0> speed <125>;				
				turn leg5 to z-axis <0> speed <25>;				
				turn leg6 to y-axis <-30> speed <125>;
				sleep 100;
			}
			if (bMoving )
			{
				turn leg1 to z-axis <31> speed <125>;
				turn leg2 to y-axis <34> speed <125>;
				turn leg2 to z-axis <31> speed <25>;
				turn leg3 to y-axis <0> speed <120>;
				turn leg3 to z-axis <0> speed <25>;
				turn leg4 to y-axis <0> speed <125>;
				turn leg5 to z-axis <-31> speed <125>;
				turn leg6 to z-axis <2> speed <125>;
				sleep 100;
			}
			if (bMoving )
			{
				turn leg1 to y-axis <55> speed <125>;
				turn leg1 to z-axis <31> speed <25>;
				turn leg2 to y-axis <34> speed <25>;
				turn leg2 to z-axis <0> speed <125>;
				turn leg3 to z-axis <31> speed <125>;
				turn leg4 to y-axis <-0> speed <25>;
				turn leg4 to z-axis <-31> speed <125>;
				turn leg5 to y-axis <-31> speed <125>;
				turn leg5 to z-axis <-31> speed <25>;
				turn leg6 to y-axis <3> speed <125>;
				sleep 100;
			}
		turn leg1 to y-axis <43> speed <60>;
		turn leg1 to z-axis <0> speed <60>;
		turn leg2 to y-axis <0> speed <60>;
		turn leg2 to z-axis <0> speed <25>;
		turn leg3 to y-axis <34> speed <60>;
		turn leg3 to z-axis <31> speed <25>;
		turn leg4 to y-axis <-40> speed <60>;
		turn leg4 to z-axis <-31> speed <25>;
		turn leg5 to y-axis <-37> speed <60>;
		turn leg5 to z-axis <0> speed <60>;
		turn leg6 to y-axis <0> speed <15>;
		turn leg6 to z-axis <-45> speed <60>;
		sleep 100;
	}
}

MotionControl()
	{
		while ( TRUE )
			{
			if (bMoving )
			{
				call-script walk();
			}
			if (!bMoving )
			{
				sleep 100;
				turn leg1 to y-axis <0> speed <110>;
				turn leg1 to z-axis <0> speed <110>;
				turn leg2 to y-axis <0> speed <110>;
				turn leg2 to z-axis <0> speed <110>;
				turn leg3 to y-axis <0> speed <110>;
				turn leg3 to z-axis <0> speed <110>;
				turn leg4 to y-axis <0> speed <110>;
				turn leg4 to z-axis <0> speed <110>;
				turn leg5 to y-axis <0> speed <110>;
				turn leg5 to z-axis <0> speed <110>;
				turn leg6 to y-axis <0> speed <110>;
				turn leg6 to z-axis <0> speed <110>;
			}
			
			sleep 150;
		}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	
	start-script MotionControl();
	
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from Base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	bMoving = FALSE;
	spray = 0;
	start-script SmokeUnit();
}


StartBuilding(Func_Var_1, Func_Var_2)
{
	signal SIG_AIM;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_AIM;
}

QueryNanoPiece(piecenum)
{
	if (spray == 0) 
	{
		piecenum = lathe1;
	}
	if (spray == 1) 
	{
		piecenum = lathe2;
	}
	spray = !spray;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}
	
SweetSpot(piecenum)
{
	piecenum = base;
}

Killed( severity, corpsetype )
{
	if (severity <= 25)
	{
		corpsetype = 1;
		explode barrel type	NOHEATCLOUD;
		explode leg1 type	NOHEATCLOUD;
		explode leg2 type	NOHEATCLOUD;
		explode leg3 type	NOHEATCLOUD;
		explode leg4 type	NOHEATCLOUD;
		explode leg5 type	NOHEATCLOUD;
		explode leg6 type	NOHEATCLOUD;
		explode body type	NOHEATCLOUD;
		return ( corpsetype );
	}

	if (severity <= 50)
	{
		corpsetype = 2;
		explode barrel type	SHATTER | NOHEATCLOUD;
		explode leg1 type	FALL | NOHEATCLOUD;
		explode leg2 type	FALL | NOHEATCLOUD;
		explode leg3 type	FALL | NOHEATCLOUD;
		explode leg4 type	FALL | NOHEATCLOUD;
		explode leg5 type	FALL | NOHEATCLOUD;
		explode leg6 type	FALL | NOHEATCLOUD;
		explode body type	SHATTER | NOHEATCLOUD;
		return ( corpsetype );
	}

	corpsetype = 3;
	explode barrel type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode leg1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode leg2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode leg3 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode leg4 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode leg5 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode leg6 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode body type	SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
	return ( corpsetype );
}