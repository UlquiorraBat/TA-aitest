#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pelvis, torso,
		head, hflare1, hflare2,
		rarm, rgun, rminigun1, rminigun2, rflare1, rflare2, 
		larm, lgun, lminigun1, lminigun2, lflare1, lflare2,
		lthigh, lleg, lfoot, rthigh, rleg, rfoot, shield_pos;

static-var  shield_onoff ,bMoving, bAiming, Main_Gun_Heading, gun_1, restore_delay;

// Signal definitions
#define SIG_AIM_1			2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_AIM_4			16
#define SIG_AIM_5			32
#define SIG_MOVE			64
#define MOVE_SLEEP 			1500


walk()
{
	while( bMoving )
	{
		if( bMoving )
		{
			turn pelvis to y-axis <-1.0> speed <10.000000>;
			turn pelvis to x-axis <-1.0> speed <5.000000>;
			turn lthigh to x-axis <25.0> speed <15.000000>;
			turn rthigh to x-axis <-25.0> speed <15.000000>;
			turn lfoot to x-axis <-7.0> speed <20.000000>;
			turn rleg to x-axis <-5.0> speed <20.000000>;
			turn lfoot to x-axis <-7.0> speed <20.000000>;
			turn rfoot to x-axis <7.0> speed <15.000000>;
			turn rleg to x-axis <10.0> speed <20.000000>;
			turn pelvis to z-axis <1.0> speed <7.000000>;
			if (!bAiming)
			{
				turn larm to x-axis <-5.000000> speed <5.000000>;
				turn rarm to x-axis <5.000000> speed <5.000000>;
			}
			
			sleep MOVE_SLEEP;
		
		}
		if( bMoving )
		{
			turn pelvis to y-axis <1.000000> speed <10.000000>;
			turn pelvis to x-axis <1.000000> speed <5.000000>;
			turn lthigh to x-axis <-25.0> speed <20.000000>;
			turn rthigh to x-axis <25.0> speed <20.000000>;
			turn rfoot to x-axis <-7.0> speed <20.000000>;
			turn lleg to x-axis <-10.0> speed <20.000000>;
			turn lfoot to x-axis <7.0> speed <20.000000>;
			turn lleg to x-axis <10.0> speed <20.000000>;
			turn pelvis to z-axis <-1.000000> speed <5.000000>;
			if (!bAiming)
			{
				turn larm to x-axis <5.000000> speed <5.000000>;
				turn rarm to x-axis <-5.000000> speed <5.000000>;
			}
						
			sleep MOVE_SLEEP;			
		}
	}
}

stop()
{
	turn lthigh to x-axis <0.000000> speed <50.0>;
	turn rthigh to x-axis <0.000000> speed <50.0>;
	turn lleg to x-axis <0.000000> speed <80.0>;
	turn rleg to x-axis <0.000000> speed <80.0>;
	turn pelvis to y-axis <0.000000> speed <80.0>;
	turn pelvis to x-axis <0.000000> speed <20.0>;
	move pelvis to y-axis [0.000000] speed [20.0];
	turn pelvis to z-axis <0.000000> speed <20.0>;
	turn rfoot to x-axis <0.000000> speed <80.0>;
	turn lfoot to x-axis <0.000000> speed <80.0>;
	turn pelvis to x-axis <10.000000> speed <46.0>;
	turn pelvis to x-axis <-3.000000> speed <46.0>;
	turn pelvis to x-axis <0.000000> speed <46.0>;
	turn larm to x-axis <0.000000> speed <46.0>;
	turn rarm to x-axis <0.000000> speed <46.0>;
	wait-for-turn pelvis around x-axis;
	sleep 20;
}

Shield()
{
	shield_onoff = !shield_onoff;
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
		
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from pelvis;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	gun_1 = 0;
	shield_onoff = 1;
	Main_Gun_Heading = 0;
	restore_delay = 5000;
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script walk();
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
	start-script stop();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn torso to y-axis <0.000000> speed <45.0>;
}

RestoreAfterDelayPlasma()
{
	sleep 500;
	spin lminigun1 around z-axis speed <500.0> accelerate <-100.0>;
	spin rminigun1 around z-axis speed <500.0> accelerate <-100.0>;
	spin lminigun2 around z-axis speed <500.0> accelerate <-100.0>;
	spin rminigun2 around z-axis speed <500.0> accelerate <-100.0>;
	
	sleep 350;
	spin lminigun1 around z-axis speed <350.0> accelerate <-75.0>;
	spin rminigun1 around z-axis speed <350.0> accelerate <-75.0>;
	spin lminigun2 around z-axis speed <350.0> accelerate <-75.0>;
	spin rminigun2 around z-axis speed <350.0> accelerate <-75.0>;
	
	sleep 250;
	spin lminigun1 around z-axis speed <100.0> accelerate <-50.0>;
	spin rminigun1 around z-axis speed <100.0> accelerate <-50.0>;
	spin lminigun2 around z-axis speed <100.0> accelerate <-50.0>;
	spin rminigun2 around z-axis speed <100.0> accelerate <-50.0>;
	
	sleep 200;
	spin lminigun1 around z-axis speed <0.0> accelerate <-25.0>;
	spin rminigun1 around z-axis speed <0.0> accelerate <-25.0>;
	spin lminigun2 around z-axis speed <0.0> accelerate <-25.0>;
	spin rminigun2 around z-axis speed <0.0> accelerate <-25.0>;
	
	sleep 8000;
	bAiming = FALSE;
	turn rarm to x-axis <0.000000> speed <20.0>;
	turn larm to x-axis <0.000000> speed <20.0>;	
}

AimFromPrimary(piecenum)
{
	piecenum = head;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = hflare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = hflare2;
	}
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		gun_1 = 1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		gun_1 = 0;
		return (0);
	}
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	Main_Gun_Heading = Heading;
	turn torso to y-axis heading speed <80.0>;
	wait-for-turn torso around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

// PLASMA ARMS

AimFromWeapon2(piecenum)
{
	piecenum = torso;
}

AimFromWeapon3(piecenum)
{
	piecenum = torso;
}

AimFromWeapon4(piecenum)
{
	piecenum = torso;
}

AimFromWeapon5(piecenum)
{
	piecenum = torso;
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	
	if (heading > (Main_Gun_Heading + 3000) or heading < (Main_Gun_Heading - 3000))
	{
		return (0);
	}
	
	bAiming = TRUE;
	turn larm to x-axis <0.000000> - pitch speed <60.0>;
	turn rarm to x-axis <0.000000> - pitch speed <60.0>;
	wait-for-turn larm around x-axis;
	wait-for-turn rarm around x-axis;
	wait-for-turn torso around y-axis;
	start-script RestoreAfterDelayPlasma();
	return (1);
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	
	if (heading > (Main_Gun_Heading + 3000) or heading < (Main_Gun_Heading - 3000))
	{
		return (0);
	}
	
	wait-for-turn larm around x-axis;
	wait-for-turn rarm around x-axis;
	wait-for-turn torso around y-axis;
	return (1);
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	
	if (heading > (Main_Gun_Heading + 3000) or heading < (Main_Gun_Heading - 3000))
	{
		return (0);
	}
	
	wait-for-turn larm around x-axis;
	wait-for-turn rarm around x-axis;
	wait-for-turn torso around y-axis;
	return (1);
}

AimWeapon5(heading, pitch)
{
	signal SIG_AIM_5;
	set-signal-mask SIG_AIM_5;
	
	if (heading > (Main_Gun_Heading + 3000) or heading < (Main_Gun_Heading - 3000))
	{
		return (0);
	}
	
	wait-for-turn larm around x-axis;
	wait-for-turn rarm around x-axis;
	wait-for-turn torso around y-axis;
	return (1);
}

FireWeapon2()
{
	emit-sfx 1024 + 0 from rflare1;
	spin rminigun1 around z-axis speed <750.0>;
}

FireWeapon3()
{
	emit-sfx 1024 + 0 from rflare2;
	spin rminigun2 around z-axis speed <750.0>;
}

FireWeapon4()
{
	emit-sfx 1024 + 0 from lflare1;
	spin lminigun1 around z-axis speed <750.0>;
}

FireWeapon5()
{
	emit-sfx 1024 + 0 from lflare2;
	spin lminigun2 around z-axis speed <750.0>;
}

QueryWeapon2(piecenum)
{
	piecenum = rflare1;
}

QueryWeapon3(piecenum)
{
	piecenum = lflare1;
}

QueryWeapon4(piecenum)
{
	piecenum = rflare2;
}

QueryWeapon5(piecenum)
{
	piecenum = lflare2;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	explode lfoot type NOHEATCLOUD;
	explode lleg type NOHEATCLOUD;
	explode lthigh type NOHEATCLOUD;
	explode rfoot type NOHEATCLOUD;
	explode rleg type NOHEATCLOUD;
	explode rthigh type NOHEATCLOUD;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode torso type NOHEATCLOUD;
		return (corpsetype);
	}
	explode larm type NOHEATCLOUD | FALL | SHATTER;
	explode rarm type NOHEATCLOUD | FALL | SHATTER;
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode torso type NOHEATCLOUD | SHATTER | SMOKE | FIRE;
		return (corpsetype);
	}
	corpsetype = 3;
	explode torso type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT | FIRE | SMOKE | FIRE;
	return (corpsetype);
}
