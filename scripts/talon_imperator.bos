#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body,
	   flare1, flare2, flare3, barrel1, barrel2, barrel3, turret1, sleeve1,
	   turret2, sleeve2, flare2a, flare2b, barrel2a, barrel2b,
       w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12;

static-var  gun_1, gun_2;


// Signal definitions
#define SIG_AIM_1			2
#define SIG_AIM_2			4
#define SIG_MOVE			8

RockOnWaves()
{
	while( TRUE )
	{
		turn base to x-axis <1.> speed <1.>;
		move base to y-axis [0.] speed [0.];
		wait-for-turn base around x-axis;
		turn base to x-axis <-1.> speed <1.>;
		move base to y-axis [-0.] speed [0.];
		wait-for-move base along y-axis;
		move base to y-axis [0.] speed [0.];
		wait-for-turn base around x-axis;
		turn base to x-axis <1.> speed <1.>;
		move base to y-axis [-0.] speed [0.];
		wait-for-move base along y-axis;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare2a;
	hide flare2b;
	gun_1 = 0;
	gun_2 = 0;
	start-script SmokeUnit();
	start-script RockOnWaves();
}

RestoreAfterDelay()
{
	sleep 3000;
	turn sleeve1 to x-axis <0.> speed <40.>;
	turn turret1 to y-axis <0.> speed <40.>;
}

RestoreMinigun()
{
	sleep 1000;
	spin barrel2a around z-axis speed <0.000000> accelerate <-10.000000>;
	spin barrel2b around z-axis speed <0.000000> accelerate <-10.000000>;
	turn sleeve2 to x-axis <0.> speed <50.>;
	turn turret2 to y-axis <0.> speed <50.>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 3 from w1;
		emit-sfx 3 from w2;
		emit-sfx 3 from w3;
		emit-sfx 3 from w4;
		emit-sfx 3 from w5;
		emit-sfx 3 from w6;
		emit-sfx 3 from w7;
		emit-sfx 3 from w8;
		emit-sfx 3 from w9;
		emit-sfx 3 from w10;
		emit-sfx 3 from w11;
		emit-sfx 3 from w12;
		emit-sfx 5 from w1;
		emit-sfx 5 from w2;
		emit-sfx 5 from w3;
		emit-sfx 5 from w4;
		emit-sfx 5 from w5;
		emit-sfx 5 from w6;
		emit-sfx 5 from w7;
		emit-sfx 5 from w8;
		emit-sfx 5 from w9;
		emit-sfx 5 from w10;
		emit-sfx 5 from w11;
		emit-sfx 5 from w12;
		sleep 250;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	turn turret1 to y-axis heading speed <60.>;
	turn sleeve1 to x-axis <0.> - pitch speed <60.>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		emit-sfx 1024 from flare1;
		move barrel1 to z-axis [-2.5] now;
		sleep 150;
		move barrel1 to z-axis [0.] speed [2.];
		sleep 150;
		gun_1 = 1;
	}
	else if( gun_1 == 1 )
	{
		emit-sfx 1024 from flare2;
		move barrel2 to z-axis [-2.5] now;
		sleep 150;
		move barrel2 to z-axis [0.] speed [2.];
		sleep 150;
		gun_1 = 2;
	}
	else if( gun_1 == 2 )
	{
		emit-sfx 1024 from flare3;
		move barrel3 to z-axis [-3.] now;
		sleep 150;
		move barrel3 to z-axis [0.] speed [2.];
		sleep 150;
		gun_1 = 0;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare3;
	}
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <100.0>;
	turn sleeve2 to x-axis <0.> - pitch speed <100.0>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreMiniGun();
	return (1);
}

FireWeapon2()
{
	if(gun_2 == 0)
	{
		spin barrel2a around z-axis speed <425.000000>;	
	}
	if(gun_2 == 1)
	{
		spin barrel2b around z-axis speed <425.000000>;	
	}
	++gun_2;
	if(gun_2 == 2)
	{
		gun_2 = 0;
	}
}

AimFromWeapon2(piecenum)
{
	piecenum = turret2;
}

QueryWeapon2(piecenum)
{
	if(gun_2 == 0)
	{
		piecenum = flare2a;
	}
	if(gun_2 == 1)
	{
		piecenum = flare2b;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode barrel2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode barrel2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode sleeve1 type NOHEATCLOUD;
		explode turret2 type NOHEATCLOUD;
		explode sleeve1 type NOHEATCLOUD;
		explode turret1 type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode barrel2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode barrel2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode base type NOHEATCLOUD;
	explode body type NOHEATCLOUD;
	explode sleeve1 type NOHEATCLOUD;
	explode turret2 type NOHEATCLOUD;
	explode sleeve1 type NOHEATCLOUD;
	explode turret1 type NOHEATCLOUD;
	return (corpsetype);
}
