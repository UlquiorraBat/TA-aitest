#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hull, ltrack, rtrack, rtireturn, ltireturn, turret, pitchturret,
		flare1, flare2, flare3, flare4,
		barrel1, barrel2, barrel3, barrel4;

static-var  restore_delay, gun_1, gun_2;

// Signal definitions
#define SIG_AIM_1				2
#define SIG_AIM_2				4
#define SIG_MOVE				8

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	spin rtireturn around x-axis speed <200.000000> accelerate <15.000000>;
	spin ltireturn around x-axis speed <200.000000> accelerate <15.000000>;
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	spin rtireturn around x-axis speed <0.000000> accelerate <-15.000000>;
	spin ltireturn around x-axis speed <0.000000> accelerate <-15.000000>;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from Base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

HitByWeapon(anglex, anglez)
{
	turn Base to z-axis anglez speed <105.000000>;
	turn Base to x-axis anglex speed <105.000000>;
	wait-for-turn Base around z-axis;
	wait-for-turn Base around x-axis;
	turn Base to z-axis <0.000000> speed <30.000000>;
	turn Base to x-axis <0.000000> speed <30.000000>;
}

Create()
{
	restore_delay = 2500;
	gun_1 = 0;
	gun_2 = 0;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <220.000000>;
	turn pitchturret to x-axis <0.000000> speed <230.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	turn turret to y-axis heading speed <500.000000>;
	turn pitchturret to x-axis <0.000000> - pitch speed <450.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn pitchturret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move barrel1 to z-axis [-0.800000] speed [150.000000];
		sleep 100;
		move barrel1 to z-axis [0.000000] speed [10.000000];
	}
	if( gun_1 == 1 )
	{
		move barrel2 to z-axis [-0.800000] speed [150.000000];
		sleep 100;
		move barrel2 to z-axis [0.000000] speed [10.000000];
	}
	++gun_1;
	if( gun_1 == 2 )
	{
		gun_1 = 0;
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	wait-for-turn turret around y-axis;
	wait-for-turn pitchturret around x-axis;
	return (1);
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		move barrel3 to z-axis [-0.800000] speed [150.000000];
		sleep 100;
		move barrel3 to z-axis [0.000000] speed [10.000000];
	}
	if( gun_2 == 1 )
	{
		move barrel4 to z-axis [-0.800000] speed [150.000000];
		sleep 100;
		move barrel4 to z-axis [0.000000] speed [10.000000];
	}
	
	++gun_2;
	if( gun_2 == 2 )
	{
		gun_2 = 0;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flare3;
	}
	if( gun_2 == 1 )
	{
		piecenum = flare4;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode ltrack type NOHEATCLOUD;
		explode rtrack type NOHEATCLOUD;
		explode hull type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode pitchturret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode ltrack type NOHEATCLOUD;
		explode rtrack type NOHEATCLOUD;
		explode hull type NOHEATCLOUD | SHATTER;
		explode turret type NOHEATCLOUD | SHATTER;
		explode pitchturret type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode ltrack type NOHEATCLOUD;
	explode rtrack type NOHEATCLOUD;
	explode hull type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode pitchturret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
