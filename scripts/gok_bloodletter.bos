#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pelvis, torso, lshoulderrecoil, lshoulder, larmrecoil, larm, lsystem,
       lfire, rshoulderrecoil, rshoulder, rarmrecoil, rarm, rsystem, rfire, head,
       lleg, lboot, rleg, rboot;

static-var  bMoving, bAiming;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			if( aiming )
			{
				if( bMoving )
				{
					turn lleg to x-axis <15.> speed <120.>;
					turn lboot to x-axis <30.> speed <120.>;
					turn rleg to x-axis <-75.> speed <360.>;
					turn rboot to x-axis <45.> speed <300.>;
					move pelvis to y-axis [2.] speed [8.];
					turn torso to x-axis <0.> speed <20.>;
					sleep 250;
				}
				if( bMoving )
				{
					turn lleg to x-axis <45.> speed <120.>;
					turn lboot to x-axis <15.> speed <60.>;
					turn rleg to x-axis <-90.> speed <60.>;
					turn rboot to x-axis <90.> speed <180.>;
					move pelvis to y-axis [0.] speed [8.];
					sleep 250;
				}
				if( bMoving )
				{
					turn lleg to x-axis <15.> speed <120.>;
					turn lboot to x-axis <-30.> speed <180.>;
					turn rleg to x-axis <-15.> speed <300.>;
					turn rboot to x-axis <30.> speed <240.>;
					move pelvis to y-axis [2.] speed [8.];
					turn torso to x-axis <15.> speed <60.>;
					sleep 250;
				}
				if( bMoving )
				{
					turn lleg to x-axis <-75.> speed <360.>;
					turn lboot to x-axis <45.> speed <300.>;
					turn rleg to x-axis <15.> speed <120.>;
					turn rboot to x-axis <30.> speed <120.>;
					move pelvis to y-axis [2.] speed [8.];
					turn torso to x-axis <0.> speed <20.>;
					sleep 250;
				}
				if( bMoving )
				{
					turn lleg to x-axis <-90.> speed <60.>;
					turn lboot to x-axis <90.> speed <180.>;
					turn rleg to x-axis <45.> speed <120.>;
					turn rboot to x-axis <15.> speed <60.>;
					move pelvis to y-axis [0.] speed [8.];
					sleep 250;
				}
				if( bMoving )
				{
					turn lleg to x-axis <-15.> speed <300.>;
					turn lboot to x-axis <30.> speed <240.>;
					turn rleg to x-axis <15.> speed <120.>;
					turn rboot to x-axis <-30.> speed <180.>;
					move pelvis to y-axis [2.] speed [8.];
					turn torso to x-axis <15.> speed <60.>;
					sleep 250;
				}
			}
			if( !aiming )
			{
				if( bMoving )
				{
					turn lleg to x-axis <15.> speed <120.>;
					turn lboot to x-axis <30.> speed <120.>;
					turn rleg to x-axis <-75.> speed <360.>;
					turn rboot to x-axis <45.> speed <300.>;
					move pelvis to y-axis [2.] speed [8.];
					turn larm to x-axis <0.> speed <60.>;
					turn rarm to x-axis <0.> speed <60.>;
					turn torso to x-axis <0.> speed <20.>;
					sleep 250;
				}
				if( bMoving )
				{
					turn lleg to x-axis <45.> speed <120.>;
					turn lboot to x-axis <15.> speed <60.>;
					turn rleg to x-axis <-90.> speed <60.>;
					turn rboot to x-axis <90.> speed <180.>;
					move pelvis to y-axis [0.] speed [8.];
					sleep 250;
				}
				if( bMoving )
				{
					turn lleg to x-axis <15.> speed <120.>;
					turn lboot to x-axis <-30.> speed <180.>;
					turn rleg to x-axis <-15.> speed <300.>;
					turn rboot to x-axis <30.> speed <240.>;
					move pelvis to y-axis [2.] speed [8.];
					turn larm to x-axis <30.> speed <120.>;
					turn rarm to x-axis <30.> speed <120.>;
					turn torso to x-axis <15.> speed <60.>;
					sleep 250;
				}
				if( bMoving )
				{
					turn lleg to x-axis <-75.> speed <360.>;
					turn lboot to x-axis <45.> speed <300.>;
					turn rleg to x-axis <15.> speed <120.>;
					turn rboot to x-axis <30.> speed <120.>;
					move pelvis to y-axis [2.] speed [8.];
					turn larm to x-axis <0.> speed <60.>;
					turn rarm to x-axis <0.> speed <60.>;
					turn torso to x-axis <0.> speed <20.>;
					sleep 250;
				}
				if( bMoving )
				{
					turn lleg to x-axis <-90.> speed <60.>;
					turn lboot to x-axis <90.> speed <180.>;
					turn rleg to x-axis <45.> speed <120.>;
					turn rboot to x-axis <15.> speed <60.>;
					move pelvis to y-axis [0.] speed [8.];
					sleep 250;
				}
				if( bMoving )
				{
					turn lleg to x-axis <-15.> speed <300.>;
					turn lboot to x-axis <30.> speed <240.>;
					turn rleg to x-axis <15.> speed <120.>;
					turn rboot to x-axis <-30.> speed <180.>;
					move pelvis to y-axis [2.] speed [8.];
					turn larm to x-axis <30.> speed <120.>;
					turn rarm to x-axis <30.> speed <120.>;
					turn torso to x-axis <15.> speed <60.>;
					sleep 250;
				}
			}
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justmoved )
			{
				turn lleg to x-axis <0.> speed <180.>;
				turn lboot to x-axis <0.> speed <180.>;
				turn rleg to x-axis <0.> speed <180.>;
				turn rboot to x-axis <0.> speed <180.>;
				move pelvis to y-axis [0.] speed [8.];
				turn torso to x-axis <0.> speed <20.>;
				if( !aiming )
				{
					turn larm to x-axis <0.> speed <60.>;
					turn rarm to x-axis <0.> speed <60.>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

Create()
{
	bMoving = 0;
	bAiming = 0;
	start-script MotionControl();
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = 1;
}

StopMoving()
{
	bMoving = 0;
}

RestoreAfterDelay()
{
	sleep 1500;
	bAiming = 0;
	turn torso to y-axis <0.> speed <90.>;
	turn rshoulder to x-axis <0.> speed <90.>;
	turn lshoulder to x-axis <0.> speed <90.>;
	turn rarm to x-axis <0.> speed <90.>;
	turn larm to x-axis <0.> speed <90.>;
	turn lshoulderrecoil to x-axis <0.> speed <70.>;
	turn larmrecoil to x-axis <0.> speed <50.>;
	turn rshoulderrecoil to x-axis <0.> speed <70.>;
	turn rarmrecoil to x-axis <0.> speed <50.>;
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

AimFromSecondary(piecenum)
{
	piecenum = torso;
}

QueryPrimary(piecenum)
{
	piecenum = lfire;
}

QuerySecondary(piecenum)
{
	piecenum = rfire;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn torso to y-axis heading speed <260.>;
	turn lshoulder to x-axis <-60.> - pitch speed <320.>;
	turn rshoulder to x-axis <-60.> - pitch speed <320.>;
	turn larm to x-axis <60.> speed <160.>;
	turn rarm to x-axis <60.> speed <160.>;
	wait-for-turn torso around y-axis;
	wait-for-turn lshoulder around x-axis;
	wait-for-turn rshoulder around x-axis;
	wait-for-turn larm around x-axis;
	wait-for-turn rarm around x-axis;
	bAiming = 1;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	wait-for-turn torso around y-axis;
	wait-for-turn lshoulder around x-axis;
	wait-for-turn rshoulder around x-axis;
	wait-for-turn larm around x-axis;
	wait-for-turn rarm around x-axis;
	return (1);
}

FirePrimary()
{
	turn lshoulderrecoil to x-axis <40.> speed <250.>;
	turn larmrecoil to x-axis <-30.> speed <250.>;
	sleep 150;
}

FireSecondary()
{
	turn rshoulderrecoil to x-axis <40.> speed <250.>;
	turn rarmrecoil to x-axis <-30.> speed <250.>;
	sleep 150;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode torso type NOHEATCLOUD;
		explode rarm type NOHEATCLOUD;
		explode larm type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode torso type SHATTER | NOHEATCLOUD;
		explode rarm type FALL | NOHEATCLOUD;
		explode larm type FALL | NOHEATCLOUD;
		explode rboot type FALL | NOHEATCLOUD;
		explode lboot type FALL | NOHEATCLOUD;
		explode head type FALL | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode torso type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode larm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rboot type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode lboot type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode head type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
	return (corpsetype);
}
