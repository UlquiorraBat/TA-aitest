#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, sleevemsl, sleeveflak, flare1, flare2, flare3, flare4, flare5, flare6, flare7,
       barrel1, barrel2, barrel3, barrel4, barrel5, barrel6, barrel7, msl1, msl2, msl3,
       wake1, wake2, wake3, wake4, wake5, wake6, wake7, wake8;

static-var  gun_1, gun_2, bStating;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM2			4
#define SIG_MOVE			8

setSFXoccupy(state)
{
	bStating = state;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var Func_Var_1, Func_Var_2;
	Func_Var_1 = 3;
	Func_Var_2 = 4;
	while( TRUE )
	{
		if( bStating == 1 )
		{
			emit-sfx Func_Var_1 from wake1;
			emit-sfx Func_Var_1 from wake2;
			emit-sfx Func_Var_1 from wake3;
			emit-sfx Func_Var_1 from wake4;
			emit-sfx Func_Var_1 from wake5;
			emit-sfx Func_Var_1 from wake6;
			emit-sfx Func_Var_1 from wake7;
			emit-sfx Func_Var_1 from wake8;
			emit-sfx Func_Var_2 from wake1;
			emit-sfx Func_Var_2 from wake2;
			emit-sfx Func_Var_2 from wake3;
			emit-sfx Func_Var_2 from wake4;
			emit-sfx Func_Var_2 from wake5;
			emit-sfx Func_Var_2 from wake6;
			emit-sfx Func_Var_2 from wake7;
			emit-sfx Func_Var_2 from wake8;
		}
		if( bStating == 2 )
		{
			emit-sfx Func_Var_1 from wake1;
			emit-sfx Func_Var_1 from wake2;
			emit-sfx Func_Var_1 from wake3;
			emit-sfx Func_Var_1 from wake4;
			emit-sfx Func_Var_1 from wake5;
			emit-sfx Func_Var_1 from wake6;
			emit-sfx Func_Var_1 from wake7;
			emit-sfx Func_Var_1 from wake8;
			emit-sfx Func_Var_2 from wake1;
			emit-sfx Func_Var_2 from wake2;
			emit-sfx Func_Var_2 from wake3;
			emit-sfx Func_Var_2 from wake4;
			emit-sfx Func_Var_2 from wake5;
			emit-sfx Func_Var_2 from wake6;
			emit-sfx Func_Var_2 from wake7;
			emit-sfx Func_Var_2 from wake8;
		}
		if( bStating == 3 )
		{
			emit-sfx Func_Var_1 from wake1;
			emit-sfx Func_Var_1 from wake2;
			emit-sfx Func_Var_1 from wake3;
			emit-sfx Func_Var_1 from wake4;
			emit-sfx Func_Var_1 from wake5;
			emit-sfx Func_Var_1 from wake6;
			emit-sfx Func_Var_1 from wake7;
			emit-sfx Func_Var_1 from wake8;
			emit-sfx Func_Var_2 from wake1;
			emit-sfx Func_Var_2 from wake2;
			emit-sfx Func_Var_2 from wake3;
			emit-sfx Func_Var_2 from wake4;
			emit-sfx Func_Var_2 from wake5;
			emit-sfx Func_Var_2 from wake6;
			emit-sfx Func_Var_2 from wake7;
			emit-sfx Func_Var_2 from wake8;
		}
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	sleep 25;
}

Create()
{
	gun_1 = 0;
	gun_2 = 0;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 3000;
	turn sleevemsl to x-axis <0.0> speed <100.>;
	turn sleeveflak to x-axis <0.0> speed <100.>;
	turn turret to y-axis <0.> speed <80.>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <380.>;
	turn sleevemsl to x-axis <0.> - pitch speed <325.>;
	turn sleeveflak to x-axis <0.> - pitch speed <325.>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleevemsl around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	turn turret to y-axis heading speed <380.>;
	turn sleevemsl to x-axis <0.> - pitch speed <325.>;
	turn sleeveflak to x-axis <0.> - pitch speed <325.>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleevemsl around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	++gun_1;
	if( gun_1 == 3 )
	{
		gun_1 = 0;
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = msl1;
	}
	if( gun_1 == 1 )
	{
		piecenum = msl2;
	}
	if( gun_1 == 2 )
	{
		piecenum = msl3;
	}
}
	
FireSecondary()
{
	if( gun_2 == 0 )
	{
		emit-sfx 1025 from flare1;
		move barrel1 to z-axis [-3.] now;
		sleep 25;
		move barrel1 to z-axis [0.] speed [5.];
	}
	if( gun_2 == 1 )
	{
		emit-sfx 1025 from flare2;
		move barrel2 to z-axis [-3.] now;
		sleep 25;
		move barrel2 to z-axis [0.] speed [5.];
	}
	if( gun_2 == 2 )
	{
		emit-sfx 1025 from flare3;
		move barrel3 to z-axis [-3.] now;
		sleep 25;
		move barrel3 to z-axis [0.] speed [5.];
	}
	if( gun_2 == 3 )
	{
		emit-sfx 1025 from flare4;
		move barrel4 to z-axis [-3.] now;
		sleep 25;
		move barrel4 to z-axis [0.] speed [5.];
	}
	if( gun_2 == 4 )
	{
		emit-sfx 1025 from flare5;
		move barrel5 to z-axis [-3.] now;
		sleep 25;
		move barrel5 to z-axis [0.] speed [5.];
	}
	if( gun_2 == 5 )
	{
		emit-sfx 1025 from flare6;
		move barrel6 to z-axis [-3.] now;
		sleep 25;
		move barrel6 to z-axis [0.] speed [5.];
	}
	if( gun_2 == 6 )
	{
		emit-sfx 1025 from flare7;
		move barrel7 to z-axis [-3.] now;
		sleep 25;
		move barrel7 to z-axis [0.] speed [5.];
	}
	++gun_2;
	if( gun_2 == 7 )
	{
		gun_2 = 0;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_2 == 1 )
	{
		piecenum = flare2;
	}
	if( gun_2 == 2 )
	{
		piecenum = flare3;
	}
	if( gun_2 == 3 )
	{
		piecenum = flare4;
	}
	if( gun_2 == 4 )
	{
		piecenum = flare5;
	}
	if( gun_2 == 5 )
	{
		piecenum = flare6;
	}
	if( gun_2 == 6 )
	{
		piecenum = flare7;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1 type NOHEATCLOUD;
		explode barrel3 type NOHEATCLOUD;
		explode barrel2 type NOHEATCLOUD;
		explode barrel4 type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode sleevemsl type NOHEATCLOUD;
		explode sleeveflak type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type SHATTER | NOHEATCLOUD;
		explode barrel3 type SHATTER | NOHEATCLOUD;
		explode barrel2 type FALL | NOHEATCLOUD;
		explode barrel4 type FALL | NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode sleevemsl type SHATTER | NOHEATCLOUD;
		explode sleeveflak type SHATTER | NOHEATCLOUD;
		explode turret type SHATTER | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel1 type SHATTER | NOHEATCLOUD | FALL | SMOKE | FIRE;
	explode barrel3 type SHATTER | NOHEATCLOUD | FALL | SMOKE | FIRE;
	explode barrel2 type FALL | NOHEATCLOUD | SMOKE | FIRE;
	explode barrel4 type FALL | NOHEATCLOUD | SMOKE | FIRE;
	explode body type NOHEATCLOUD;
	explode sleevemsl type SHATTER | NOHEATCLOUD | FALL | SMOKE | FIRE;
	explode sleeveflak type SHATTER | NOHEATCLOUD | FALL | SMOKE | FIRE;
	explode turret type SHATTER | NOHEATCLOUD | FALL | SMOKE | FIRE;
	return (corpsetype);
}
