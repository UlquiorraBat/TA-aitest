#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, 
		turret1, sleeve1a, sleeve1b, flare1a, flare1b, barrel1a, barrel1b,
		turret2, sleeve2a, sleeve2b, flare2a, flare2b, barrel2a, barrel2b,
        w1, w2, w3, w4, w5, w6, w7, w8, w9, miss1, miss2, aimmsl, jet1, jet2;

static-var  gun_1, gun_2, gun_miss, bStating, bJumping;

// Signal definitions
#define SIG_AIM_1			2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_MOVE			16
#define SIG_ROCK			32

ProcessFlame()
{
	while( TRUE )
	{
		if( bJumping == 1 )
		{
			emit-sfx 1024 + 0 from jet1;
			emit-sfx 1024 + 0 from jet2;
		}
		sleep 100;
	}
}

BeginJump()
{
	bJumping = 1;
	sleep 500;
}

EndJump()
{
	bJumping = 0;
	sleep 500;
}

HitByWeapon(anglex, anglez)
{
	signal SIG_ROCK;
	set-signal-mask SIG_ROCK;
	turn body to z-axis <0.1> * anglez * 0.5 speed <105.>;
	turn body to x-axis <0.1> * anglex * 0.5 speed <105.>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.> speed <30.>;
	turn body to x-axis <0.> speed <30.>;
}

Wave()
{
	while( TRUE )
	{
		if( bStating == 2 OR bStating == 1 )
		{
			emit-sfx 3 from w1;
			emit-sfx 3 from w2;
			emit-sfx 3 from w3;
			emit-sfx 3 from w4;
			emit-sfx 3 from w5;
			emit-sfx 3 from w6;
			emit-sfx 3 from w7;
			emit-sfx 3 from w8;
			emit-sfx 3 from w9;
			emit-sfx 5 from w1;
			emit-sfx 5 from w2;
			emit-sfx 5 from w3;
			emit-sfx 5 from w4;
			emit-sfx 5 from w5;
			emit-sfx 5 from w6;
			emit-sfx 5 from w7;
			emit-sfx 5 from w8;
			emit-sfx 5 from w9;
		}
		sleep 325;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	
	start-script Wave();
	start-script ProcessFlame();
	
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	turn turret2 to y-axis <180.> now;
	hide flare1a;
	hide flare2a;
	hide flare1b;
	hide flare2b;
	hide jet1;
	hide jet2;
	gun_miss = 1;
	gun_1 = 0;
	gun_2 = 0;
	bJumping = 0;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 1000;
	spin barrel1a around z-axis speed <0.000000> accelerate <-10.000000>;
	spin barrel1b around z-axis speed <0.000000> accelerate <-10.000000>;
	spin barrel2a around z-axis speed <0.000000> accelerate <-10.000000>;
	spin barrel2b around z-axis speed <0.000000> accelerate <-10.000000>;
	sleep 3000;
	turn sleeve1a to x-axis <0.> speed <60.>;
	turn sleeve1b to x-axis <0.> speed <60.>;
	turn sleeve2a to x-axis <0.> speed <60.>;
	turn sleeve2b to x-axis <0.> speed <60.>;
	turn turret1 to y-axis <0.> speed <30.>;
	turn turret2 to y-axis <180.> speed <30.>;
}

setSFXoccupy(state)
{
	bStating = state;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

StopMoving()
{
	signal SIG_MOVE;
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	return (1);
}

FirePrimary()
{
	++gun_miss;
	if(gun_miss == 3 )
	{	
		gun_miss = 1;	
	}
}

AimFromPrimary(piecenum)
{
	piecenum = aimmsl;
}

QueryPrimary(piecenum)
{
	if(gun_miss == 1 )
	{	
		piecenum = miss1;	
	}
	if(gun_miss == 2 )
	{	
		piecenum = miss2;	
	}
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret1 to y-axis heading speed <100.000000>;
	turn sleeve1a to x-axis <0.0> - pitch speed <100.000000>;
	turn sleeve1b to x-axis <0.0> - pitch speed <100.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1a around x-axis;
	wait-for-turn sleeve1b around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	if(gun_1 == 0)
	{
		spin barrel1a around z-axis speed <425.000000>;	
	}
	if(gun_1 == 1)
	{
		spin barrel1b around z-axis speed <425.000000>;	
	}
	++gun_1;
	if(gun_1 == 2)
	{
		gun_1 = 0;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = turret1;
}

QuerySecondary(piecenum)
{
	if(gun_1 == 0)
	{
		piecenum = flare1a;
	}
	if(gun_1 == 1)
	{
		piecenum = flare1b;
	}
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turret2 to y-axis heading speed <100.000000>;
	turn sleeve2a to x-axis <0.0> - pitch speed <100.000000>;
	turn sleeve2b to x-axis <0.0> - pitch speed <100.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2a around x-axis;
	wait-for-turn sleeve2b around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	if(gun_2 == 0)
	{
		spin barrel2a around z-axis speed <425.000000>;	
	}
	if(gun_2 == 1)
	{
		spin barrel2b around z-axis speed <425.000000>;	
	}
	++gun_2;
	if(gun_2 == 2)
	{
		gun_2 = 0;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = turret2;
}

QueryTertiary(piecenum)
{
	if(gun_2 == 0)
	{
		piecenum = flare2a;
	}
	if(gun_2 == 1)
	{
		piecenum = flare2b;
	}	
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode sleeve2a type NOHEATCLOUD;
		explode turret2 type NOHEATCLOUD;
		explode sleeve1a type NOHEATCLOUD;
		explode turret1 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD | FALL;
		explode sleeve2a type NOHEATCLOUD | FALL;
		explode turret2 type NOHEATCLOUD | FALL;
		explode sleeve1a type NOHEATCLOUD | FALL;
		explode turret1 type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode sleeve2a type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode sleeve1a type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
