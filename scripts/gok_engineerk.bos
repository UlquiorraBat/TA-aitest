#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pelvis, torsotwist, torso, lshoulder, larm, llathe, rshoulderrecoil,
       rshoulder, rarmrecoil, rarm, barrel, flare1, flare2, backpack,
       lleg, lboot, rleg, rboot;

static-var  bAiming, bMoving;


MotionControl(justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		if( bMoving )
		{
			if( bAiming )
			{
				if( bMoving )
				{
					turn lleg to x-axis <15.> speed <75.>;
					turn lboot to x-axis <30.> speed <75.>;
					turn rleg to x-axis <-75.> speed <225.>;
					turn rboot to x-axis <45.> speed <188.>;
					move pelvis to y-axis [2.] speed [5.];
					turn torso to x-axis <0.> speed <13.>;
					turn torsotwist to z-axis <5.> speed <10.>;
					turn pelvis to z-axis <-10.> speed <20.>;
					move pelvis to x-axis [2.] speed [2.];
					sleep 400;
				}
				if( bMoving )
				{
					turn lleg to x-axis <45.> speed <75.>;
					turn lboot to x-axis <15.> speed <38.>;
					turn rleg to x-axis <-90.> speed <38.>;
					turn rboot to x-axis <90.> speed <113.>;
					move pelvis to y-axis [0.] speed [5.];
					sleep 400;
				}
				if( bMoving )
				{
					turn lleg to x-axis <15.> speed <75.>;
					turn lboot to x-axis <-30.> speed <113.>;
					turn rleg to x-axis <-15.> speed <188.>;
					turn rboot to x-axis <30.> speed <150.>;
					move pelvis to y-axis [2.] speed [5.];
					turn torso to x-axis <15.> speed <38.>;
					turn torsotwist to z-axis <-5.> speed <5.>;
					turn pelvis to z-axis <10.> speed <10.>;
					move pelvis to x-axis [-2.] speed [3.];
					sleep 400;
				}
				if( bMoving )
				{
					turn lleg to x-axis <-75.> speed <225.>;
					turn lboot to x-axis <45.> speed <188.>;
					turn rleg to x-axis <15.> speed <75.>;
					turn rboot to x-axis <30.> speed <75.>;
					move pelvis to y-axis [2.] speed [5.];
					turn torso to x-axis <0.> speed <13.>;
					turn torsotwist to z-axis <-5.> speed <10.>;
					turn pelvis to z-axis <10.> speed <20.>;
					move pelvis to x-axis [-2.] speed [2.];
					sleep 400;
				}
				if( bMoving )
				{
					turn lleg to x-axis <-90.> speed <38.>;
					turn lboot to x-axis <90.> speed <113.>;
					turn rleg to x-axis <45.> speed <75.>;
					turn rboot to x-axis <15.> speed <38.>;
					move pelvis to y-axis [0.] speed [5.];
					sleep 400;
				}
				if( bMoving )
				{
					turn lleg to x-axis <-15.> speed <188.>;
					turn lboot to x-axis <30.> speed <150.>;
					turn rleg to x-axis <15.> speed <75.>;
					turn rboot to x-axis <-30.> speed <113.>;
					move pelvis to y-axis [2.] speed [5.];
					turn torso to x-axis <15.> speed <38.>;
					turn torsotwist to z-axis <5.> speed <5.>;
					turn pelvis to z-axis <-10.> speed <10.>;
					move pelvis to x-axis [2.] speed [3.];
					sleep 400;
				}
			}
			if( !bAiming )
			{
				if( bMoving )
				{
					turn lleg to x-axis <15.> speed <75.>;
					turn lboot to x-axis <30.> speed <75.>;
					turn rleg to x-axis <-75.> speed <225.>;
					turn rboot to x-axis <45.> speed <188.>;
					move pelvis to y-axis [2.] speed [5.];
					turn larm to x-axis <0.> speed <38.>;
					turn rarm to x-axis <0.> speed <38.>;
					turn lshoulder to x-axis <-30.> speed <38.>;
					turn rshoulder to x-axis <15.> speed <19.>;
					turn torso to x-axis <0.> speed <13.>;
					turn torsotwist to z-axis <5.> speed <10.>;
					turn pelvis to z-axis <-10.> speed <20.>;
					move pelvis to x-axis [2.] speed [2.];
					sleep 400;
				}
				if( bMoving )
				{
					turn lleg to x-axis <45.> speed <75.>;
					turn lboot to x-axis <15.> speed <38.>;
					turn rleg to x-axis <-90.> speed <38.>;
					turn rboot to x-axis <90.> speed <113.>;
					move pelvis to y-axis [0.] speed [5.];
					sleep 400;
				}
				if( bMoving )
				{
					turn lleg to x-axis <15.> speed <75.>;
					turn lboot to x-axis <-30.> speed <113.>;
					turn rleg to x-axis <-15.> speed <188.>;
					turn rboot to x-axis <30.> speed <150.>;
					move pelvis to y-axis [2.] speed [5.];
					turn larm to x-axis <30.> speed <75.>;
					turn rarm to x-axis <30.> speed <75.>;
					turn lshoulder to x-axis <30.> speed <38.>;
					turn rshoulder to x-axis <-15.> speed <19.>;
					turn torso to x-axis <15.> speed <38.>;
					turn torsotwist to z-axis <-5.> speed <5.>;
					turn pelvis to z-axis <10.> speed <10.>;
					move pelvis to x-axis [-2.] speed [3.];
					sleep 400;
				}
				if( bMoving )
				{
					turn lleg to x-axis <-75.> speed <225.>;
					turn lboot to x-axis <45.> speed <188.>;
					turn rleg to x-axis <15.> speed <75.>;
					turn rboot to x-axis <30.> speed <75.>;
					move pelvis to y-axis [2.] speed [5.];
					turn larm to x-axis <0.> speed <38.>;
					turn rarm to x-axis <0.> speed <38.>;
					turn lshoulder to x-axis <30.> speed <38.>;
					turn rshoulder to x-axis <-15.> speed <19.>;
					turn torso to x-axis <0.> speed <13.>;
					turn torsotwist to z-axis <-5.> speed <10.>;
					turn pelvis to z-axis <10.> speed <20.>;
					move pelvis to x-axis [-2.] speed [2.];
					sleep 400;
				}
				if( bMoving )
				{
					turn lleg to x-axis <-90.> speed <38.>;
					turn lboot to x-axis <90.> speed <113.>;
					turn rleg to x-axis <45.> speed <75.>;
					turn rboot to x-axis <15.> speed <38.>;
					move pelvis to y-axis [0.] speed [5.];
					sleep 400;
				}
				if( bMoving )
				{
					turn lleg to x-axis <-15.> speed <188.>;
					turn lboot to x-axis <30.> speed <150.>;
					turn rleg to x-axis <15.> speed <75.>;
					turn rboot to x-axis <-30.> speed <113.>;
					move pelvis to y-axis [2.] speed [5.];
					turn larm to x-axis <30.> speed <75.>;
					turn rarm to x-axis <30.> speed <75.>;
					turn lshoulder to x-axis <-30.> speed <38.>;
					turn rshoulder to x-axis <15.> speed <19.>;
					turn torso to x-axis <15.> speed <38.>;
					turn torsotwist to z-axis <5.> speed <5.>;
					turn pelvis to z-axis <-10.> speed <10.>;
					move pelvis to x-axis [2.] speed [3.];
					sleep 400;
				}
			}
			justmoved = TRUE;
		}
		if( !bMoving )
		{
			if( justmoved )
			{
				turn lleg to x-axis <0.> speed <90.>;
				turn lboot to x-axis <0.> speed <90.>;
				turn rleg to x-axis <0.> speed <90.>;
				turn rboot to x-axis <0.> speed <90.>;
				move pelvis to y-axis [0.] speed [4.];
				turn torsotwist to z-axis <0.> speed <8.>;
				turn torso to x-axis <0.> speed <10.>;
				turn pelvis to z-axis <0.> speed <16.>;
				move pelvis to x-axis [0.] speed [2.];
				if( !bAiming )
				{
					turn larm to x-axis <0.> speed <30.>;
					turn rarm to x-axis <0.> speed <30.>;
					turn lshoulder to x-axis <0.> speed <30.>;
					turn rshoulder to x-axis <0.> speed <10.>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script MotionControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

QueryNanoPiece(piecenum)
{
	piecenum = llathe;
}

RestorePosition()
{
	sleep 1500;
	turn torso to y-axis <0.> speed <80.>;
	turn lshoulder to x-axis <0.> speed <30.>;
	turn rshoulder to x-axis <0.> speed <30.>;
	turn larm to x-axis <0.> speed <45.>;
	turn rarm to x-axis <0.> speed <45.>;
	spin barrel around z-axis speed <0.> accelerate <-200.>;
	wait-for-turn torso around y-axis;
	wait-for-turn lshoulder around x-axis;
	wait-for-turn rshoulder around x-axis;
	bAiming = 0;
}

AimFromPrimary(piecenum)
{
	piecenum = rarm;
}

AimFromSecondary(piecenum)
{
	piecenum = rarm;
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	bAiming = 1;
	turn torso to y-axis heading speed <180.>;
	turn lshoulder to x-axis <0.> speed <140.>;
	turn rshoulder to x-axis <0.> speed <140.>;
	turn larm to x-axis <0.> - pitch speed <120.>;
	turn rarm to x-axis <0.> - pitch speed <120.>;
	wait-for-turn torso around y-axis;
	wait-for-turn lshoulder around x-axis;
	wait-for-turn rshoulder around x-axis;
	wait-for-turn larm around x-axis;
	wait-for-turn rarm around x-axis;
	Start-script RestorePosition();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	wait-for-turn torso around y-axis;
	wait-for-turn lshoulder around x-axis;
	wait-for-turn rshoulder around x-axis;
	wait-for-turn larm around x-axis;
	wait-for-turn rarm around x-axis;
	return (1);
}

StartBuilding(Func_Var_1, Func_Var_2)
{
	bAiming = 1;
	turn torso to y-axis Func_Var_1 speed <100.>;
	turn lshoulder to x-axis <-30.> speed <90.>;
	turn larm to x-axis <-15.> - Func_Var_2 speed <120.>;
	wait-for-turn torso around y-axis;
	wait-for-turn lshoulder around x-axis;
	wait-for-turn larm around x-axis;
	set INBUILDSTANCE to 1;
}

TargetCleared(Func_Var_1)
{
	signal 2;
	set-signal-mask 2;
	call-script RestorePosition();
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
	signal 2;
	set-signal-mask 2;
	call-script RestorePosition();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode torso type NOHEATCLOUD;
		explode rshoulder type NOHEATCLOUD;
		explode lshoulder type NOHEATCLOUD;
		explode rarm type NOHEATCLOUD;
		explode larm type NOHEATCLOUD ;
		explode pelvis type NOHEATCLOUD;
		explode rleg type NOHEATCLOUD | SHATTER;
		explode rboot type NOHEATCLOUD | SHATTER;
		explode lleg type NOHEATCLOUD | SHATTER;
		explode lboot type NOHEATCLOUD | SHATTER;
		explode barrel type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode torso type SHATTER | NOHEATCLOUD;
		explode rshoulder type FALL | NOHEATCLOUD;
		explode lshoulder type FALL | NOHEATCLOUD;
		explode rarm type FALL | NOHEATCLOUD;
		explode larm type FALL | NOHEATCLOUD;
		explode pelvis type FALL | NOHEATCLOUD;
		explode rleg type FALL | NOHEATCLOUD;
		explode rboot type FALL | NOHEATCLOUD;
		explode lleg type FALL | NOHEATCLOUD;
		explode lboot type FALL | NOHEATCLOUD;
		explode barrel type FALL | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode torso type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rshoulder type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode lshoulder type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode larm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rboot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode lboot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode barrel type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
	return (corpsetype);
}
