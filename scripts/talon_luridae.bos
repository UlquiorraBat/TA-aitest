#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, tail, flarea, flareb, flare, 
		rleg1, rleg2, rleg3, lleg1, lleg2, lleg3, head;

static-var  bMoving, bAiming, gun_1;

// Signal definitions
#define SIG_AIM_1			2
#define SIG_AIM_2			4

Playtail()
{
	while( TRUE )
	{
		sleep 1000;
		if( !bMoving && !bAiming)
		{
			turn tail to y-axis <15.000000> speed <2.000000>;
			turn tail to x-axis <30.000000> speed <2.000000>;
			turn head to y-axis <2.000000> speed <1.000000>;
			sleep 750;
		}
		if( !bMoving && !bAiming)
		{
			turn tail to y-axis <-15.000000> speed <2.000000>;
			turn tail to x-axis <-30.000000> speed <5.000000>;
			turn head to y-axis <-2.000000> speed <1.000000>;
			sleep 750;
		}
		
		turn tail to y-axis <0.000000> speed <2.>;
		turn tail to x-axis <0.000000> speed <2.>;
		turn head to y-axis <0.000000> speed <1.000000>;
		sleep 150;
	}
}

MotionControl()
{
	while( TRUE )
	{
		sleep 100;
		if( bMoving )
		{
			turn rleg1 to y-axis <0.> speed <55.0>;
			turn rleg1 to z-axis <0.> speed <55.0>;
			turn rleg2 to z-axis <15.> speed <55.0>;
			turn rleg3 to y-axis <17.> speed <55.0>;
			turn rleg3 to z-axis <0.> speed <55.0>;
			turn lleg1 to y-axis <-20.> speed <55.0>;
			turn lleg1 to z-axis <0.> speed <55.0>;
			turn lleg2 to y-axis <0.> speed <55.0>;
			turn lleg2 to z-axis <0.> speed <55.0>;
			turn lleg3 to y-axis <-15.> speed <55.0>;
			turn lleg3 to z-axis <-23.> speed <55.0>;
			turn tail to x-axis <7> speed <3.>;
			sleep 180;
			turn rleg2 to y-axis <55.0> speed <55.0>;
			turn rleg2 to z-axis <15.> speed <55.0>;
			turn lleg1 to y-axis <0.> speed <55.0>;
			turn lleg2 to z-axis <-15.> speed <55.0>;
			turn lleg3 to z-axis <1.> speed <55.0>;
			turn rleg1 to z-axis <15.> speed <55.0>;
			turn rleg3 to y-axis <0.> speed <55.0>;
			turn rleg3 to z-axis <0.> speed <55.0>;
			sleep 180;
			turn lleg2 to y-axis <-15.> speed <55.0>;
			turn lleg2 to z-axis <-15.> speed <55.0>;
			turn lleg3 to y-axis <2.> speed <55.0>;
			turn rleg2 to y-axis <55.0> speed <55.0>;
			turn rleg2 to z-axis <0.> speed <55.0>;
			turn rleg3 to z-axis <15.> speed <55.0>;
			turn rleg1 to y-axis <27.> speed <55.0>;
			turn rleg1 to z-axis <15.> speed <55.0>;
			turn lleg1 to y-axis <0.> speed <55.0>;
			turn lleg1 to z-axis <-15.> speed <55.0>;
			turn tail to z-axis <-5> speed <8.>;
			sleep 180;
			turn lleg2 to y-axis <-18.> speed <55.0>;
			turn lleg2 to z-axis <0.> speed <55.0>;
			turn lleg3 to y-axis <0.> speed <55.0>;
			turn lleg3 to z-axis <-23.> speed <55.0>;
			turn rleg2 to y-axis <12.> speed <55.0>;
			turn rleg2 to z-axis <0.> speed <55.0>;
			turn rleg3 to y-axis <17.> speed <55.0>;
			turn rleg1 to y-axis <21.> speed <55.0>;
			turn rleg1 to z-axis <0.> speed <55.0>;
			turn rleg3 to z-axis <15.> speed <55.0>;
			turn lleg1 to y-axis <-20.> speed <55.0>;
			turn lleg1 to z-axis <-15.> speed <55.0>;
			sleep 180;
		}
		if( !bMoving )
		{
			turn rleg1 to y-axis <0.> speed <55.0>;
			turn rleg2 to y-axis <0.> speed <55.0>;
			turn rleg3 to y-axis <0.> speed <55.0>;
			turn lleg1 to y-axis <0.> speed <55.0>;
			turn lleg2 to y-axis <0.> speed <55.0>;
			turn lleg3 to y-axis <0.> speed <55.0>;
			sleep 50;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	
	start-script PlayTail();
	start-script MotionControl();
	
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;	
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

RestoreAfterDelay()
{
	sleep 3000;
	turn turret to y-axis <0.000000> speed <60.000000>;
	turn turret to x-axis <0.000000> speed <40.000000>;
	turn head to y-axis <0.000000> speed <35.000000>;
	bAiming = FALSE;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	bAiming = TRUE;
	turn tail to z-axis <0.000000> speed <2.000000>;
	turn tail to x-axis <0.000000> speed <2.000000>;
	turn turret to y-axis heading speed <120.000000>;
	turn turret to x-axis <0.000000> - pitch speed <80.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flare;
	sleep 150;
}


AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn head to y-axis heading speed <35.000000>;
	wait-for-turn head around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	++gun_1;
	if (gun_1 == 2)
	{
		gun_1 = 0;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = head;
}

QuerySecondary(piecenum)
{
	if (gun_1 == 0)
	{
		piecenum = flarea;
	}
	if (gun_1 == 1)
	{
		piecenum = flareb;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode rleg1 type NOHEATCLOUD;
		explode lleg2 type NOHEATCLOUD;
		explode tail type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD | FALL;
		explode rleg1 type NOHEATCLOUD | FALL;
		explode lleg2 type NOHEATCLOUD | FALL;
		explode tail type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | FALL;
	explode rleg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lleg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode tail type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
