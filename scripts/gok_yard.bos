#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, spiner, dome, pad,
		soclea, gatea, nanoa, pillara, enginea, heada,
		socleb, gateb, nanob, pillarb, engineb, headb,
		soclec, gatec, nanoc, pillarc, enginec, headc,
		socled, gated, nanod, pillard, engined, headd;
		

static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE		2

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from soclea;
			emit-sfx smoketype from soclec;
			emit-sfx smoketype from dome;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

activatescr()
{
	move body to y-axis [100.000000] speed [12.000000];
	sleep 7000;
}

deactivatescr()
{
	move body to y-axis [0.000000] speed [2.000000];
	sleep 15000;
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	call-script deactivatescr();
	set INBUILDSTANCE to 0;
	call-script CloseYard();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	spray = 0;
	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = nanoa;
	}
	if( spray == 1 )
	{
		piecenum = nanob;
	}
	if( spray == 2 )
	{
		piecenum = nanoc;
	}
	if( spray == 3 )
	{
		piecenum = nanod;
	}
	++spray;
	if( spray == 4 )
	{
		spray = 0;
	}
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin spiner around y-axis speed <18.0> accelerate <1.0>;
}

StopBuilding()
{
	spin spiner around y-axis speed <0.0> accelerate <-1.0>;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 33 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD | FALL | SMOKE;
		explode dome type NOHEATCLOUD | FALL | SMOKE;
		explode pillara type NOHEATCLOUD | FALL | SMOKE;
		explode pillarb type NOHEATCLOUD | FALL | SMOKE;
		explode pillarc type NOHEATCLOUD | FALL | SMOKE;
		explode pillard type NOHEATCLOUD | FALL | SMOKE;
		explode enginea type NOHEATCLOUD | FALL | SMOKE;
		explode engineb type NOHEATCLOUD | FALL | SMOKE;
		explode enginec type NOHEATCLOUD | FALL | SMOKE;
		explode engined type NOHEATCLOUD | FALL | SMOKE;
		explode gatea type NOHEATCLOUD | FALL | SMOKE;
		explode gateb type NOHEATCLOUD | FALL | SMOKE;
		explode gatec type NOHEATCLOUD | FALL | SMOKE;
		explode gated type NOHEATCLOUD | FALL | SMOKE;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | FALL | SMOKE;
	explode dome type NOHEATCLOUD | FALL | SMOKE;		
	explode pillara type NOHEATCLOUD | FALL | SMOKE;
	explode pillarb type NOHEATCLOUD | FALL | SMOKE;
	explode pillarc type NOHEATCLOUD | FALL | SMOKE;
	explode pillard type NOHEATCLOUD | FALL | SMOKE;
	explode enginea type NOHEATCLOUD | FALL | SMOKE;
	explode engineb type NOHEATCLOUD | FALL | SMOKE;
	explode enginec type NOHEATCLOUD | FALL | SMOKE;
	explode engined type NOHEATCLOUD | FALL | SMOKE;
	explode gatea type NOHEATCLOUD | FALL | SMOKE;
	explode gateb type NOHEATCLOUD | FALL | SMOKE;
	explode gatec type NOHEATCLOUD | FALL | SMOKE;
	explode gated type NOHEATCLOUD | FALL | SMOKE;
	return (corpsetype);
}