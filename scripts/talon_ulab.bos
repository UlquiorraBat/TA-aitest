#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, nanotower1a, nanotower1b, nanotower2a, nanotower2b,
       nanoPad, door1a, door1b, door2a, door2b, 
       nanospray1a, nanospray1b, nanospray1c, nanospray1d,
       nanospray2a, nanospray2b, nanospray2c, nanospray2d;

static-var  statechg_DesiredState, statechg_StateChanging, spray ;

// Signal definitions
#define SIG_ACTIVATE			2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 4 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from door1a;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from nanotower2b;
			}
			if( Func_Var_4 == 4 )
			{
				emit-sfx smoketype from door2b;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

activatescr()
{
	if( TRUE )
	{
		//turn door1b to z-axis <-20.000000> speed <15.000000>;
		//turn door2b to z-axis <20.000000> speed <15.000000>;
		//wait-for-turn door1b around z-axis;
	}

	if( TRUE )
	{	
		turn door1a to z-axis <-45.000000> speed <10.000000>;
		turn door2a to z-axis <45.000000> speed <10.000000>;
		
		sleep 500;
		
		turn nanotower1b to z-axis <30.000000> speed <25.000000>;
		turn nanotower2b to z-axis <-30.000000> speed <25.000000>;
				
		wait-for-turn nanotower1b around z-axis;
		
		sleep 500;
		
		turn nanotower1b to z-axis <90.000000> speed <25.000000>;
		turn nanotower2b to z-axis <-90.000000> speed <25.000000>;
		
		turn door1b to z-axis <45.000000> speed <10.000000>;
		turn door2b to z-axis <-45.000000> speed <10.000000>;
		
		sleep 500;
		
		turn nanotower1b to z-axis <180.000000> speed <35.000000>;
		turn nanotower2b to z-axis <-180.000000> speed <35.000000>;
		
		turn nanotower1a to z-axis <-20.000000> speed <40.000000>;
		turn nanotower2a to z-axis <20.000000> speed <40.000000>;
		
		turn nanotower1b to z-axis <180.000000> speed <55.000000>;
		turn nanotower2b to z-axis <-180.000000> speed <55.000000>;
		
		wait-for-turn door2a around z-axis;
		
		turn door1a to z-axis <-90.000000> speed <15.000000>;
		turn door2a to z-axis <90.000000> speed <15.000000>;
		
		turn nanotower1a to z-axis <-90.000000> speed <40.000000>;
		turn nanotower2a to z-axis <90.000000> speed <40.000000>;
		
		turn nanotower1b to z-axis <270.000000> speed <50.000000>;
		turn nanotower2b to z-axis <-270.000000> speed <50.000000>;	
	}
}

deactivatescr()
{
	if( TRUE )
	{

		turn nanotower1b to z-axis <180.000000> speed <50.000000>;
		turn nanotower2b to z-axis <-180.000000> speed <50.000000>;	
		
		wait-for-turn nanotower1b around z-axis;

		turn door1a to z-axis <-45.000000> speed <20.000000>;
		turn door2a to z-axis <45.000000> speed <20.000000>;
		
		turn door1b to z-axis <0.000000> speed <50.000000>;
		turn door2b to z-axis <0.000000> speed <50.000000>;
		
		turn nanotower1a to z-axis <-20.000000> speed <35.000000>;
		turn nanotower2a to z-axis <20.000000> speed <35.000000>;
		
		turn nanotower1b to z-axis <60.000000> speed <75.000000>;
		turn nanotower2b to z-axis <-60.000000> speed <75.000000>;	
		
		wait-for-turn door2a around z-axis;
		
		turn door1a to z-axis <0.000000> speed <20.000000>;
		turn door2a to z-axis <0.000000> speed <20.000000>;
		
		turn nanotower1b to z-axis <0.000000> speed <75.000000>;
		turn nanotower2b to z-axis <0.000000> speed <75.000000>;
		
		
		turn nanotower1a to z-axis <0.000000> speed <35.000000>;
		turn nanotower2a to z-axis <0.000000> speed <35.000000>;
		
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 2500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 2500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	sleep 3100;
	set INBUILDSTANCE to 1;

}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	spray  = 1;
	call-script InitState();
	start-script SmokeUnit();
}

QueryBuildInfo(piecenum)
{
	piecenum = NanoPad;
}

QueryNanoPiece(piecenum)
{
	if( spray  == 1 )
	{
		piecenum = nanospray1a;
	}
	if( spray  == 2 )
	{
		piecenum = nanospray1b;
	}
	if( spray  == 3 )
	{
		piecenum = nanospray1c;
	}
	if( spray  == 4 )
	{
		piecenum = nanospray1d;
	}
	if( spray  == 5 )
	{
		piecenum = nanospray2a;
	}
	if( spray  == 6 )
	{
		piecenum = nanospray2b;
	}
	if( spray  == 7 )
	{
		piecenum = nanospray2c;
	}
	if( spray  == 8 )
	{
		piecenum = nanospray2d;
	}
	++spray ;
	if( spray  == 9 )
	{
		spray  = 0;
	}
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	sleep 50;
}

StopBuilding()
{
	sleep 50;
}

SweetSpot(piecenum)
{
	piecenum = Base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode door1a type NOHEATCLOUD;
		explode door2a type NOHEATCLOUD;
		explode nanotower1a type NOHEATCLOUD;
		explode nanotower1b type NOHEATCLOUD;
		explode door2b type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode door1a type FALL | NOHEATCLOUD;
		explode door2a type FALL |  NOHEATCLOUD;
		explode nanotower1a type FALL | NOHEATCLOUD;
		explode nanotower1b type FALL | NOHEATCLOUD;
		explode door2b type FALL | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode door1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode door2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode nanotower1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode nanotower1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode door2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	return (corpsetype);
}
