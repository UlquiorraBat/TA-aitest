#define TA

#include "sfxtype.h"
#include "exptype.h"

piece  base, hull, ftrack, lbtrack, rbtrack,
       turret, pitchturret, sleeve, barrel, fire;

static-var  UnitHeading, UnitSpeed, Deployed, Firing;

// Signal definitions
#define SIG_AIM			2
#define SIG_MOVE		4

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RockUnit(AngleX, AngleZ)
{
	turn base to x-axis AngleX / 2 speed <25.00>;
	turn base to z-axis AngleZ / 2 speed <25.00>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.00> speed <10.00>;
	turn base to x-axis <0.00> speed <10.00>;
}

Create()
{
	UnitSpeed = 1;
	Deployed = 0;
	Firing = 0;	
	start-script SmokeUnit();
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	Deployed = 0;
		
	while( TRUE )
	{
		if( UnitSpeed == 1 )
			{
			UnitHeading = UnitHeading - get XZ_ATAN(7);
			turn ftrack to y-axis 6 * UnitHeading speed <25.00>;
			UnitHeading = get XZ_ATAN(7);
			}
		if( UnitSpeed == 2 )
			{
			UnitHeading = UnitHeading - get XZ_ATAN(7);
			turn ftrack to y-axis 4.00 * UnitHeading speed <25.00>;
			UnitHeading = get XZ_ATAN(7);
			}
		sleep 100;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	
	turn ftrack to y-axis <0.00> speed <100.00>;
	sleep 250;
	Deployed = 1;
}

MoveRate1()
{
	UnitSpeed = 1;
}

MoveRate2()
{
	UnitSpeed = 2;
}

RestoreAfterDelay()
{
	sleep 10000;
	turn turret to y-axis <0.00> speed <50.00>;
	turn pitchturret to x-axis <0.00> speed <20.00>;
}

SweetSpot(PieceNum)
{
	PieceNum = base;
}

QueryPrimary(PieceNum)
{
	PieceNum = fire;
}

AimFromPrimary(PieceNum)
{
	PieceNum = pitchturret;
}

AimPrimary(Heading, Pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	turn turret to y-axis Heading speed <50.00>;
	turn pitchturret to x-axis <0.00> - Pitch speed <20.00>;
	
	wait-for-turn turret around y-axis;
	wait-for-turn pitchturret around x-axis;
	
	start-script RestoreAfterDelay();
	
	return(1);
}

FirePrimary(Random)
{
	emit-sfx 1024 + 0 from fire;
	move barrel to z-axis [-2.00] speed [500.00];
	sleep 100;
	move barrel to z-axis [0.00] speed [1.00];
	Firing = 0;
}

Killed(Severity, CorpseType, Random)
{
	if( Severity <= 50 )
	{
		CorpseType = 1;		
		Random = Rand( 1, 2 );
		if( Random == 1 )
			{
			explode ftrack type NOHEATCLOUD;
			}
		Random = Rand( 1, 2 );
		if( Random == 1 )
			{
			explode lbtrack type NOHEATCLOUD;
			}
		Random = Rand( 1, 2 );
		if( Random == 1 )
			{
			explode rbtrack type NOHEATCLOUD;
			}
		return (CorpseType);
	}
	
	CorpseType = 3;
	
	Random = Rand( 1, 2 );
	if( Random == 1 )
	{
		explode ftrack type NOHEATCLOUD;
	}
	Random = Rand( 1, 2 );
	if( Random == 1 )
	{
		explode lbtrack type NOHEATCLOUD;
	}
	Random = Rand( 1, 2 );
	if( Random == 1 )
	{
		explode rbtrack type NOHEATCLOUD;
	}
	Random = Rand( 1, 2 );
	if( Random == 1 )
	{
		explode barrel type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
	}
	Random = Rand( 1, 2 );
	if( Random == 1 )
	{
		explode sleeve type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
	}
	return (CorpseType);
}
