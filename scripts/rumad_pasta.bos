#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, pitchturret, barrel1, turret, 
		flare1, flare2, flare3, flare4, 
		w1, w2, w3, w4;

static-var  restore_delay, bMoving, msl_1;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from Base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

HitByWeapon(anglex, anglez)
{
	turn Base to z-axis anglez speed <105.000000>;
	turn Base to x-axis anglex speed <105.000000>;
	wait-for-turn Base around z-axis;
	wait-for-turn Base around x-axis;
	turn Base to z-axis <0.000000> speed <30.000000>;
	turn Base to x-axis <0.000000> speed <30.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	spin w1 around x-axis speed <200.000000> accelerate <15.000000>;
	spin w2 around x-axis speed <200.000000> accelerate <15.000000>;
	spin w3 around x-axis speed <200.000000> accelerate <15.000000>;
	spin w4 around x-axis speed <200.000000> accelerate <15.000000>;
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	spin w1 around x-axis speed <0.000000> accelerate <-15.000000>;
	spin w2 around x-axis speed <0.000000> accelerate <-15.000000>;
	spin w3 around x-axis speed <0.000000> accelerate <-15.000000>;
	spin w4 around x-axis speed <0.000000> accelerate <-15.000000>;
}

Create()
{
	msl_1 = 1;
	restore_delay = 2000;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <80.000000>;
	turn pitchturret to x-axis <0.000000> speed <80.000000>;
}

QueryPrimary(piecenum)
{
	if ( msl_1 == 1)
	{
		piecenum = flare1;
	}
	if ( msl_1 == 2)
	{
		piecenum = flare2;
	}
	if ( msl_1 == 3)
	{
		piecenum = flare3;
	}
	if ( msl_1 == 4)
	{
		piecenum = flare4;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = pitchturret;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <120.000000>;
	turn pitchturret to x-axis <0.000000> - pitch speed <80.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn pitchturret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

Shot1()
{
	move barrel1 to z-axis [-0.5] speed [50.0];
	sleep 500;
	move barrel1 to z-axis [0.0] speed [0.15];	
}


FirePrimary()
{
	while(TRUE)
	{
		sleep 125;	
		++msl_1;
		if (msl_1 == 5)
		{
			msl_1 = 1;
			return (0);		
		}
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode barrel1 type NOHEATCLOUD;
		explode w1 type NOHEATCLOUD;
		explode w2 type NOHEATCLOUD;
		explode w3 type NOHEATCLOUD;
		explode w4 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD | SHATTER;
		explode turret type NOHEATCLOUD | SHATTER;
		explode barrel1 type NOHEATCLOUD | SHATTER;
		explode w1 type NOHEATCLOUD | SHATTER;
		explode w2 type NOHEATCLOUD | SHATTER;
		explode w3 type NOHEATCLOUD | SHATTER;
		explode w4 type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode w1 type NOHEATCLOUD | SHATTER;
	explode w2 type NOHEATCLOUD | SHATTER;
	explode w3 type NOHEATCLOUD | SHATTER;
	explode w4 type NOHEATCLOUD | SHATTER;
	return (corpsetype);
}
