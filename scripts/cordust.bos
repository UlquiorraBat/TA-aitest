#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, launch, engine, reactors, r1, r2, r3, r4, r5, r6,
	   turret1r, sleeve1r, barrel1r, flare1r,
	   turret2r, sleeve2r, barrel2r, flare2r,
	   turret3r, sleeve3r, barrel3r, flare3r,
       turret4r, sleeve4r, barrel4r, flare4r,
       turret1m, sleeve1m, gun1am, gun1bm, flare1am, flare1bm,
       turret2m, sleeve2m, gun2am, gun2bm, flare2am, flare2bm,
       turret1, turret2, sleeves1, sleeves2, barrels1, barrels2,
       flare1a, flare1b, flare2a, flare2b,
       msl1, msl2, msl3, msl4, msl5, msl6, msl7, msl8, msl9, msl10;

static-var  gun1, gun2, gun3, gun4, missile;

// Signal definitions
#define SIG_AIM_1			2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_AIM_4			16
#define SIG_AIM_5			32
#define SIG_AIM_6			64
#define SIG_AIM_7			128
#define SIG_AIM_8			256
#define SIG_AIM_9			512

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
			emit-sfx smoketype from turret1m;
			emit-sfx smoketype from turret2r;
			emit-sfx smoketype from turret4r;
			emit-sfx smoketype from engine;
			emit-sfx smoketype from launch;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

missileReloadr(Static_Var_1)
{
	
	if (Static_Var_1 == 0)
	{
		move msl1 to y-axis [0.000000] speed [1.000000];
		sleep 50;
		move msl2 to y-axis [0.000000] speed [1.000000];
		sleep 50;
		move msl3 to y-axis [0.000000] speed [1.000000];
		sleep 50;
		move msl4 to y-axis [0.000000] speed [1.000000];
		sleep 50;
		move msl5 to y-axis [0.000000] speed [1.000000];
		sleep 50;
		move msl6 to y-axis [0.000000] speed [1.000000];
		sleep 50;
		move msl7 to y-axis [0.000000] speed [1.000000];
		sleep 50;
		move msl8 to y-axis [0.000000] speed [1.000000];
		sleep 50;
		move msl9 to y-axis [0.000000] speed [1.000000];
		sleep 50;
		move msl10 to y-axis [0.000000] speed [1.000000];
		return 0;
	}
	
	if (Static_Var_1 == 1)
	{
		move msl1 to y-axis [-11.000000] now;
		sleep 2500;
		//show msl1;
		move msl1 to y-axis [0.000000] speed [1.000000];
	}
	if (Static_Var_1 == 2)
	{
		move msl2 to y-axis [-11.000000] now;
		sleep 2500;
		//show msl2;
		move msl2 to y-axis [0.000000] speed [1.000000];
	}
	if (Static_Var_1 == 3)
	{
		move msl3 to y-axis [-11.000000] now;
		sleep 2500;
		//show msl3;
		move msl3 to y-axis [0.000000] speed [1.000000];
	}
	if (Static_Var_1 == 4)
	{
		move msl4 to y-axis [-11.000000] now;
		sleep 2500;
		//show msl4;
		move msl4 to y-axis [0.000000] speed [1.000000];
	}
	if (Static_Var_1 == 5)
	{
		move msl5 to y-axis [-11.000000] now;
		sleep 2500;
		//show msl5;
		move msl5 to y-axis [0.000000] speed [1.000000];
	}
	if (Static_Var_1 == 6)
	{
		move msl6 to y-axis [-11.000000] now;
		sleep 2500;
		//show msl6;
		move msl6 to y-axis [0.000000] speed [1.000000];
	}
	if (Static_Var_1 == 7)
	{
		move msl7 to y-axis [-11.000000] now;
		sleep 2500;
		//show msl7;
		move msl7 to y-axis [0.000000] speed [1.000000];
	}
	if (Static_Var_1 == 8)
	{
		move msl8 to y-axis [-11.000000] now;
		sleep 2500;
		//show msl8;
		move msl8 to y-axis [0.000000] speed [1.000000];
	}
	if (Static_Var_1 == 9)
	{
		move msl9 to y-axis [-11.000000] now;
		sleep 2500;
		//show msl9;
		move msl9 to y-axis [0.000000] speed [1.000000];
	}
	if (Static_Var_1 == 10)
	{
		move msl10 to y-axis [-11.000000] now;
		sleep 2500;
		//show msl9;
		move msl10 to y-axis [0.000000] speed [1.000000];
	}
}

Create()
{
	move msl1 to y-axis [-11.000000] now;
	move msl2 to y-axis [-11.000000] now;
	move msl3 to y-axis [-11.000000] now;
	move msl4 to y-axis [-11.000000] now;
	move msl5 to y-axis [-11.000000] now;
	move msl6 to y-axis [-11.000000] now;
	move msl7 to y-axis [-11.000000] now;
	move msl8 to y-axis [-11.000000] now;
	move msl9 to y-axis [-11.000000] now;
	move msl10 to y-axis [-11.000000] now;	
	hide flare1am;
	hide flare1bm;
	hide flare2am;
	hide flare2bm;
	missile = 1;
	gun1 = 0; 
	gun2 = 0;
	gun3 = 0;
	gun4 = 0;
	start-script SmokeUnit();
	start-script missileReloadr(0);
}

RestoreAfterDelay1()
{
	sleep 6000;
	turn turret1 to y-axis <0.000000> speed <55.000000>;
	turn sleeves1 to x-axis <0.000000> speed <30.000000>;
}

RestoreAfterDelay2()
{
	sleep 6000;
	turn turret2 to y-axis <0.000000> speed <55.000000>;
	turn sleeves2 to x-axis <0.000000> speed <30.000000>;
}

RestoreAfterDelay3()
{
	sleep 6000;
	turn turret1r to y-axis <0.000000> speed <55.000000>;
	turn sleeve1r to x-axis <0.000000> speed <30.000000>;
}

RestoreAfterDelay4()
{
	sleep 6000;
	turn turret2r to y-axis <0.000000> speed <55.000000>;
	turn sleeve2r to x-axis <0.000000> speed <30.000000>;
}

RestoreAfterDelay5()
{
	sleep 10000;
	turn turret3r to y-axis <0.000000> speed <55.000000>;
	turn sleeve3r to x-axis <0.000000> speed <30.000000>;
}

RestoreAfterDelay6()
{
	sleep 5000;
	turn turret4r to y-axis <0.000000> speed <55.000000>;
	turn sleeve4r to x-axis <0.000000> speed <30.000000>;
}

RestoreAfterDelay7()
{
	sleep 2000;
	turn turret1m to y-axis <0.000000> speed <100.000000>;
	turn sleeve1m to x-axis <0.000000> speed <100.000000>;
}

RestoreAfterDelay8()
{
	sleep 2000;
	turn turret2m to y-axis <0.000000> speed <100.000000>;
	turn sleeve2m to x-axis <0.000000> speed <100.000000>;
}

AimWeapon1(heading, pitch)
{
	signal 32;
	set-signal-mask 32;
	turn turret1 to y-axis heading speed <50.000000>;
	turn sleeves1 to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeves1 around x-axis;
	start-script RestoreAfterDelay5();
	return (1);
}

AimWeapon2(heading, pitch)
{
	signal 64;
	set-signal-mask 64;
	turn turret2 to y-axis heading speed <75.000000>;
	turn sleeves2 to x-axis <0.000000> - pitch speed <75.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeves2 around x-axis;
	start-script RestoreAfterDelay6();
	return (1);
}

AimWeapon3(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret1r to y-axis heading speed <75.000000>;
	turn sleeve1r to x-axis <0.000000> - pitch speed <75.000000>;
	wait-for-turn turret1r around y-axis;
	wait-for-turn sleeve1r around x-axis;
	start-script RestoreAfterDelay1();
	return (1);
}

AimWeapon4(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	turn turret2r to y-axis heading speed <75.000000>;
	turn sleeve2r to x-axis <0.000000> - pitch speed <75.000000>;
	wait-for-turn turret2r around y-axis;
	wait-for-turn sleeve2r around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

AimWeapon5(heading, pitch)
{
	signal 8;
	set-signal-mask 8;
	turn turret3r to y-axis heading speed <75.000000>;
	turn sleeve3r to x-axis <0.000000> - pitch speed <75.000000>;
	wait-for-turn turret3r around y-axis;
	wait-for-turn sleeve3r around x-axis;
	start-script RestoreAfterDelay3();
	return (1);
}

AimWeapon6(heading, pitch)
{
	signal 16;
	set-signal-mask 16;
	turn turret4r to y-axis heading speed <75.000000>;
	turn sleeve4r to x-axis <0.000000> - pitch speed <75.000000>;
	wait-for-turn turret4r around y-axis;
	wait-for-turn sleeve4r around x-axis;
	start-script RestoreAfterDelay4();
	return (1);
}

AimWeapon7(heading, pitch)
{
	signal 128;
	set-signal-mask 128;
	turn turret1m to y-axis heading speed <400.000000>;
	turn sleeve1m to x-axis <0.000000> - pitch speed <350.000000>;
	wait-for-turn turret1m around y-axis;
	wait-for-turn sleeve1m around x-axis;
	start-script RestoreAfterDelay7();
	return (1);
}

AimWeapon8(heading, pitch)
{
	signal 256;
	set-signal-mask 256;
	turn turret2m to y-axis heading speed <400.000000>;
	turn sleeve2m to x-axis <0.000000> - pitch speed <350.000000>;
	wait-for-turn turret2m around y-axis;
	wait-for-turn sleeve2m around x-axis;
	start-script RestoreAfterDelay8();
	return (1);
}

AimWeapon9(heading, pitch)
{
	signal 512;
	set-signal-mask 512;
	return (1);
}

FireWeapon1()
{	
	++gun1;
	if (gun1 == 2)
	{
		gun1 = 0;
	}
}

FireWeapon2()
{
	++gun2;
	if (gun2 == 2)
	{
		gun2 = 0;
	}
}

FireWeapon7()
{
	if( gun3 == 0 )
	{
		move gun1am to z-axis [-1.000000] speed [500.000000];
		//show flakflare4a;
		sleep 150;
		move gun1am to z-axis [0.000000] speed [3.000000];
		//hide flakflare4a;
	}
	if( gun3 == 1 )
	{
		move gun1bm to z-axis [-1.000000] speed [500.000000];
		//show flakflare4a;
		sleep 150;
		move gun1bm to z-axis [0.000000] speed [3.000000];
		//hide flakflare4a;

	}
	++gun3;
	if( gun3 == 2 )
	{
		gun3 = 0;
	}
}

FireWeapon8()
{
	if( gun4 == 0 )
	{
		move gun2am to z-axis [-1.000000] speed [500.000000];
		//show flakflare4a;
		sleep 150;
		move gun2am to z-axis [0.000000] speed [3.000000];
		//hide flakflare4a;

	}
	if( gun4 == 1 )
	{
		move gun2bm to z-axis [-1.000000] speed [500.000000];
		//show flakflare4a;
		sleep 150;
		move gun2bm to z-axis [0.000000] speed [3.000000];
		//hide flakflare4a;
	}
	++gun4;
	if( gun4 == 2 )
	{
		gun4 = 0;
	}
}

FireWeapon9()
{
	start-script missileReloadr(missile);
	++missile;
	if( missile == 11 )
	{
		missile = 1;
	}
}

AimFromWeapon3(piecenum)
{
	piecenum = turret1r;
}

QueryWeapon3(piecenum)
{
	piecenum = flare1r;
}

AimFromWeapon4(piecenum)
{
	piecenum = turret2r;
}

QueryWeapon4(piecenum)
{
	piecenum = flare2r;
}

AimFromWeapon5(piecenum)
{
	piecenum = turret3r;
}

QueryWeapon5(piecenum)
{
	piecenum = flare3r;
}

AimFromWeapon6(piecenum)
{
	piecenum = turret4r;
}

QueryWeapon6(piecenum)
{
	piecenum = flare4r;

}

AimFromWeapon1(piecenum)
{
	piecenum = turret1;
}

QueryWeapon1(piecenum)
{
	if(gun1 == 0)
	{
		piecenum = flare1a;
	}
	if(gun1 == 1)
	{
		piecenum = flare1b;
	}
}

AimFromWeapon2(piecenum)
{
	piecenum = turret2;
}

QueryWeapon2(piecenum)
{
	if(gun2 == 0)
	{
		piecenum = flare2a;
	}
	if(gun2 == 1)
	{
		piecenum = flare2b;
	}
}

AimFromWeapon7(piecenum)
{
	piecenum = turret1m;
}

QueryWeapon7(piecenum)
{
	if( gun3 == 0 )
	{
		piecenum = flare1am;
	}
	if( gun3 == 1 )
	{
		piecenum = flare1bm;
	}
}

AimFromWeapon8(piecenum)
{
	piecenum = turret2m;
}

QueryWeapon8(piecenum)
{
	if( gun4 == 0 )
	{
		piecenum = flare2am;
	}
	if( gun4 == 1 )
	{
		piecenum = flare2bm;
	}
}

AimFromWeapon9(piecenum)
{
	piecenum = launch;
}

QueryWeapon9(piecenum)
{
	if(missile == 1)
	{
		piecenum = msl10;
	}
	if(missile == 2)
	{
		piecenum = msl1;
	}
	if(missile == 3)
	{
		piecenum = msl2;
	}
	if(missile == 4)
	{
		piecenum = msl3;
	}
	if(missile == 5)
	{
		piecenum = msl4;
	}
	if(missile == 6)
	{
		piecenum = msl5;
	}
	if(missile == 7)
	{
		piecenum = msl6;
	}
	if(missile == 8)
	{
		piecenum = msl7;
	}
	if(missile == 9)
	{
		piecenum = msl8;
	}
	if(missile == 10)
	{
		piecenum = msl9;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode turret1r type NOHEATCLOUD;
		explode turret2r type NOHEATCLOUD;
		explode turret2m type NOHEATCLOUD;
		explode sleeve1r type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode sleeves1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode sleeves2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode sleeve1m type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode sleeve2m type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret4r type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode turret1r type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret2r type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret2m type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode sleeve1r type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode sleeves1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode sleeves2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode sleeve1m type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode sleeve2m type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret4r type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
