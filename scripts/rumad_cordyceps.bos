#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, bodyback, bodyfront, rtrack, ltrack, w1, w2,
		turret, arm1, arm2, emeter, lathe, radar;

static-var  restore_delay, bMoving, UnitHeading, UnitSpeed, Static_Var_1, Static_Var_2, Static_Var_3;

// Signal definitions
#define SIG_CAPTURE			2
#define SIG_MOVE			4


activatescr()
{
	turn arm1 to x-axis <-90.0> speed <-80.0>;
	turn arm2 to x-axis <20.0> speed <40.0>;
	turn emeter to x-axis <-20.0> speed <40.0>;
	sleep 300;
}

deactivatescr()
{
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.0> speed <120.0>;
	wait-for-turn turret around y-axis;
	turn arm1 to x-axis <0.0> speed <-80.0>;
	turn arm2 to x-axis <0.0> speed <40.0>;
	turn emeter to x-axis <0.0> speed <40.0>;
	sleep 300;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from Base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

HitByWeapon(anglex, anglez)
{
	turn Base to z-axis anglez speed <105.000000>;
	turn Base to x-axis anglex speed <105.000000>;
	wait-for-turn Base around z-axis;
	wait-for-turn Base around x-axis;
	turn Base to z-axis <0.000000> speed <30.000000>;
	turn Base to x-axis <0.000000> speed <30.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	
	spin w1 around x-axis speed <200.000000> accelerate <15.000000>;
	spin w2 around x-axis speed <200.000000> accelerate <15.000000>;
			
	while( TRUE )
	{
		if( UnitSpeed == 1 )
		{
			UnitHeading = UnitHeading - get XZ_ATAN(7);
			turn bodyback to y-axis -2.00 * UnitHeading speed <40.00>;
			turn bodyfront to y-axis 2.0 * UnitHeading speed <20.00>;
			UnitHeading = get XZ_ATAN(7);
		}
		if( UnitSpeed == 2 )
		{
			UnitHeading = UnitHeading - get XZ_ATAN(7);
			turn bodyback to y-axis -2.00 * UnitHeading speed <40.00>;
			turn bodyfront to y-axis 2.00 * UnitHeading speed <20.00>;
			UnitHeading = get XZ_ATAN(7);
		}
		sleep 100;
	}
	
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	spin w1 around x-axis speed <0.000000> accelerate <-15.000000>;
	spin w2 around x-axis speed <0.000000> accelerate <-15.000000>;
	turn bodyback to y-axis <0.00> speed <50.00>;
	turn bodyfront to y-axis <0.00> speed <50.00>;
	sleep 250;
}


MoveRate1()
{
	UnitSpeed = 1;
}

MoveRate2()
{
	UnitSpeed = 2;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_2 )
	{
		Static_Var_1 = requestedstate;
		return (0);
	}
	Static_Var_2 = 1;
	currentstate = Static_Var_1;
	Static_Var_1 = requestedstate;
	while( Static_Var_1 != currentstate )
	{
		if( Static_Var_1 )
		{
			call-script deactivatescr();
			Static_Var_3 = 1;
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			Static_Var_3 = 0;
			currentstate = 0;
		}
	}
	Static_Var_2 = 0;
}

Create()
{
	Static_Var_1 = 1;
	Static_Var_2 = 0;
	Static_Var_3 = 1;
	UnitSpeed = 1;
	restore_delay = 2000;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1, Func_Var_2)
{
	start-script RequestState(0);
	while( Static_Var_3 )
	{
		sleep 100;
	}
	signal SIG_CAPTURE;
	turn turret to y-axis Func_Var_1 speed <120.0>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal SIG_CAPTURE;
	set-signal-mask SIG_CAPTURE;
	sleep 5000;
	set-signal-mask 0;
	signal SIG_CAPTURE;
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = lathe;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode bodyback type NOHEATCLOUD;
		explode bodyfront type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode rtrack type NOHEATCLOUD;
		explode ltrack type NOHEATCLOUD;
		explode w1 type NOHEATCLOUD;
		explode w2 type NOHEATCLOUD;
		explode radar type NOHEATCLOUD;
		explode arm1 type NOHEATCLOUD;
		explode arm2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode bodyback type NOHEATCLOUD;
		explode bodyfront type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | FALL;
		explode rtrack type NOHEATCLOUD;
		explode ltrack type NOHEATCLOUD;
		explode w1 type NOHEATCLOUD | FALL;
		explode w2 type NOHEATCLOUD | FALL;
		explode radar type NOHEATCLOUD | FALL;
		explode arm1 type NOHEATCLOUD | FALL;
		explode arm2 type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode bodyback type NOHEATCLOUD;
	explode bodyfront type NOHEATCLOUD;
	explode turret type NOHEATCLOUD | FALL;
	explode rtrack type NOHEATCLOUD | FALL;
	explode ltrack type NOHEATCLOUD | FALL;
	explode w1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode w2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode radar type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode arm1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode arm2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
