#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, ldoor, rdoor, flare;

static-var  restore_delay, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM			2


activatescr()
{
	if( TRUE )
	{
		turn ldoor to z-axis <120.0> speed <150.000000>;	
		turn rdoor to z-axis <-120.0> speed <150.000000>;
		sleep 1500;
	}
	sleep 15;
}

deactivatescr()
{
	if( TRUE )
	{
		turn ldoor to z-axis <0.000000> speed <50.000000>;
		turn rdoor to z-axis <0.000000> speed <50.000000>;
		sleep 1500;
	}
	sleep 15;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from ldoor;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from rdoor;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	call-script activatescr();
}

Stop()
{
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

RestoreAfterDelay()
{
	sleep 10000;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script RestoreAfterDelay();
	return (1);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode ldoor type NOHEATCLOUD;
		explode rdoor type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode ldoor type NOHEATCLOUD;
		explode rdoor type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode ldoor type NOHEATCLOUD;
	explode rdoor type NOHEATCLOUD;
	return (corpsetype);
}
