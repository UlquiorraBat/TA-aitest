#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, fusee,fire, 
	   udoor, ddoor, ldoor, rdoor;

static-var  gun_1, restore_delay, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Activatescr()
{
	if( TRUE )
	{
		show fusee;
		//turn udoor to x-axis <-30.> speed <50.>;
		//turn ddoor to x-axis <30.> speed <50.>;
		//turn ldoor to z-axis <30.> speed <50.>;
		//turn rdoor to z-axis <-30.> speed <50.>;
		//wait-for-turn udoor around x-axis;
		//wait-for-turn ddoor around x-axis;
		//wait-for-turn ldoor around z-axis;
		//wait-for-turn rdoor around z-axis;
		
		move fusee to y-axis [8.0] speed [1.25];
		wait-for-move fusee along y-axis;
		
		sleep 2000;
		gun_1 = 1;
	}
	sleep 25;
}

Deactivatescr()
{
	if( TRUE )
	{
		gun_1 = 0;
		//turn udoor to x-axis <0.> speed <100.>;
		//turn ddoor to x-axis <0.> speed <100.>;
		//turn ldoor to z-axis <0.> speed <100.>;
		//turn rdoor to z-axis <0.> speed <100.>;
		//wait-for-turn udoor around x-axis;
		//wait-for-turn ddoor around x-axis;
		//wait-for-turn ldoor around z-axis;
		//wait-for-turn rdoor around z-axis;
		move fusee to y-axis [0.0] now;
	}
	sleep 300;
}

Go()
{
	call-script Activatescr();
}

Stop()
{
	sleep 4000;
	call-script Deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide fusee;
	gun_1 = 0;
	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( gun_1 == 0 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 from fire;
	hide fusee;
	gun_1 = 0;
	start-script RequestState(1);
}

AimFromPrimary(piecenum)
{
	piecenum = fire;
}

QueryPrimary(piecenum)
{
	piecenum = fire;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;

		explode body type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	
	return (corpsetype);
}
