#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, gun, door1, door2, door3, door4, stand, turret,
       barrel, flare;

static-var  bActivating, bFiring, statechg_StateChanging, statechg_DesiredState;


activatescr()
{
	if( TRUE )
	{
		bActivating = 1;
		turn door2 to z-axis <0.> speed <222.>;
		turn door4 to z-axis <0.> speed <222.>;
		turn door3 to x-axis <0.> speed <222.>;
		turn door1 to x-axis <0.> speed <222.>;
		move turret to y-axis [0.] speed [66.];
		turn gun to x-axis <-90.> speed <222.>;
		wait-for-turn door1 around x-axis;		
		wait-for-turn gun around x-axis;
		wait-for-move turret along y-axis;
		
	}
}

deactivatescr()
{
	if( TRUE )
	{
		bActivating = 1;
		move turret to y-axis [-3.] speed [8.];
		turn gun to x-axis <-90.> speed <288.>;
		turn turret to y-axis <0.> speed <288.>;
		wait-for-turn gun around x-axis;
		wait-for-move turret along y-axis;
		wait-for-turn turret around y-axis;
		turn door2 to z-axis <-90.> speed <288.>;
		turn door4 to z-axis <90.> speed <288.>;
		turn door3 to x-axis <90.> speed <288.>;
		turn door1 to x-axis <-90.> speed <288.>;
		wait-for-turn door1 around x-axis;	
		
	}
}

Go()
{
	if( !bActivating && !bFiring )
	{
		call-script activatescr();
	}
	bActivating = 0;
	set ARMORED to 0;
}

Stop()
{
	if( !bActivating && !bFiring )
	{
		call-script deactivatescr();
	}
	bActivating = 0;
	set ARMORED to 1;	
}

InitState()
{
	statechg_DesiredState = 1;
	statechg_StateChanging = 0;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = 1;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = 0;
}

RestoreAfterDelay()
{
	sleep 1000;
	spin barrel around z-axis speed <0.> accelerate <-10.>;
	sleep 1000;
	bFiring = 0;
	start-script RequestState(1);
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	
	sleep 500;
	start-script RequestState(1);
	
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare;
	bActivating = 1;
	bFiring = 0;
	call-script InitState();
	start-script RequestState(0);
	set-signal-mask 2;
	start-script SmokeUnit();	
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	call-script RequestState(0);
	turn turret to y-axis heading speed <300.0>;
	turn gun to x-axis <0.> - pitch speed <200.0>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	bFiring = 1;
	show flare;
	sleep 75;
	hide flare;
	move gun to z-axis [-1.] now;
	move gun to z-axis [0.] speed [6.];
	spin barrel around z-axis speed <500.>;
	sleep 100;
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}
Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode door3 type NOHEATCLOUD;
		explode door4 type NOHEATCLOUD;
		explode gun type NOHEATCLOUD;
		explode stand type NOHEATCLOUD ;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type NOHEATCLOUD | FALL;
		explode base type NOHEATCLOUD | FALL;
		explode door1 type NOHEATCLOUD | FALL;
		explode door2 type NOHEATCLOUD | FALL;
		explode door3 type NOHEATCLOUD | FALL;
		explode door4 type NOHEATCLOUD | FALL;
		explode gun type NOHEATCLOUD | FALL;
		explode stand type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;;
		explode base type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode gun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode stand type NOHEATCLOUD | FALL ;
		explode turret type NOHEATCLOUD | FALL ;
		return (corpsetype);
	}
		corpsetype = 3;
		explode barrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;;
		explode base type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode gun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode stand type NOHEATCLOUD | FALL ;
		explode turret type NOHEATCLOUD | FALL ;
		return (corpsetype);	
}
