#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hull, turret, ltireturn, rtireturn, ltrack, rtrack,
		launcher1, flare1, msl1,
		launcher2, flare2, msl2;

static-var  restore_delay, msl_1;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	spin rtireturn around x-axis speed <200.000000> accelerate <15.000000>;
	spin ltireturn around x-axis speed <200.000000> accelerate <15.000000>;
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	spin rtireturn around x-axis speed <0.000000> accelerate <-15.000000>;
	spin ltireturn around x-axis speed <0.000000> accelerate <-15.000000>;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from Base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

HitByWeapon(anglex, anglez)
{
	turn Base to z-axis anglez speed <105.000000>;
	turn Base to x-axis anglex speed <105.000000>;
	wait-for-turn Base around z-axis;
	wait-for-turn Base around x-axis;
	turn Base to z-axis <0.000000> speed <30.000000>;
	turn Base to x-axis <0.000000> speed <30.000000>;
}

Create()
{
	restore_delay = 2000;
	msl_1 = 0;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <220.000000>;
	turn turret to x-axis <0.000000> speed <230.000000>;
}

QueryPrimary(piecenum)
{
	if (msl_1 == 0) 
	{
		piecenum = flare1;
	}
	if (msl_1 == 1) 
	{
		piecenum = flare1;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <380.000000>;
	turn turret to x-axis <0.0> - pitch speed <380.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

RestoreMsl(numberMsl)
{
	if( numberMsl == 1 )
	{
		sleep 300;
		show msl1;
		move msl1 to z-axis [0.0] speed [3.0];
	}
	if( numberMsl == 2 )
	{
		sleep 300;
		show msl2;
		move msl2 to z-axis [0.0] speed [3.0];
	}
}

FirePrimary()
{
	if( msl_1 == 0 )
	{
		hide msl1;
		move msl1 to z-axis [-1.8] now;
		start-script RestoreMsl(1);
	}
	if( msl_1 == 1 )
	{
		hide msl2;
		move msl2 to z-axis [-1.8] now;
		start-script RestoreMsl(2);
	}
	++msl_1;
	if( msl_1 == 2 )
	{
		msl_1 = 0;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode ltrack type NOHEATCLOUD;
		explode rtrack type NOHEATCLOUD;
		explode hull type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode launcher1 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode ltrack type NOHEATCLOUD;
		explode rtrack type NOHEATCLOUD;
		explode hull type NOHEATCLOUD | SHATTER;
		explode turret type NOHEATCLOUD | SHATTER;
		explode launcher1 type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode ltrack type NOHEATCLOUD;
	explode rtrack type NOHEATCLOUD;
	explode hull type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode launcher1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
