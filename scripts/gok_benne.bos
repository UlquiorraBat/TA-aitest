#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hull, link, pillar1, pillar2, pillar3, pillar4, turret, flare1, flare2;

static-var  unitviewer, statechg_DesiredState, statechg_StateChanging, gun_1;

// Signal Definition
#define SIG_AIM			2
#define SIG_MOVE		4


activatescr()
{
	if( TRUE )
	{
		turn pillar1 to y-axis <-45.0> speed <45.0>;
		turn pillar4 to y-axis <-45.0> speed <45.0>;
		
		turn pillar2 to y-axis <45.0> speed <45.0>;
		turn pillar3 to y-axis <45.0> speed <45.0>;
		sleep 1000;
	}
	sleep 50;
}

deactivatescr()
{
	if( TRUE )
	{
		turn pillar1 to y-axis <0.0> speed <20.0>;
		turn pillar4 to y-axis <0.0> speed <20.0>;
		
		turn pillar2 to y-axis <0.0> speed <20.0>;
		turn pillar3 to y-axis <0.0> speed <20.0>;
		sleep 1000;
	}
	sleep 50;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	gun_1 = 0;
	unitviewer = FALSE;
	call-script InitState();
	start-script SmokeUnit();
}

Demo()
{
	unitviewer = TRUE;
}

QueryTransport(Func_Var_1)
{
	Func_Var_1 = link;
}

Activate()
{
	if( unitviewer )
	{
		start-script RequestState(0);
	}
}

BeginTransport(Func_Var_1)
{
	move link to y-axis [0.000000] - Func_Var_1 now;
	start-script RequestState(0);
}

Deactivate()
{
	if( unitviewer )
	{
		start-script RequestState(1);
	}
}

EndTransport()
{
	start-script RequestState(1);
}

StopMoving()
{
	signal SIG_MOVE;
}

MoveRate1()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

MoveRate2()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

MoveRate3()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
	
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <180.>;
	wait-for-turn turret around y-axis;
	return (1);
}

FirePrimary()
{
	++gun_1;
	if( gun_1 == 2 )
	{
		gun_1 = 0;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode pillar1 type NOHEATCLOUD;
		explode pillar2 type NOHEATCLOUD;
		explode pillar3 type NOHEATCLOUD;
		explode hull type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode pillar1 type NOHEATCLOUD;
		explode pillar2 type NOHEATCLOUD;
		explode pillar3 type NOHEATCLOUD | SHATTER;
		explode hull type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode pillar1 type NOHEATCLOUD;
	explode pillar2 type NOHEATCLOUD;
	explode pillar3 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode hull type NOHEATCLOUD;
	return (corpsetype);
}
