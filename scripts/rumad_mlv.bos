#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, flare, turret, wheelr, wheell,
       crusher, sleeve, lathe1, lathe2;

static-var  spray, bAiming;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	spray = 0;
	bAiming = FALSE;
	start-script SmokeUnit();
}

DetonateMines()
{
	while( TRUE )
	{
		sleep 500;
		emit-sfx 4096 from flare;
	}
}

StartBuilding(Func_Var_1, Func_Var_2)
{
	signal 4;
	bAiming = TRUE;
	turn turret to y-axis Func_Var_1 speed <160.000000>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal 4;
	set-signal-mask 4;
	sleep 6000;
	set-signal-mask 0;
	signal 4;
	bAiming = FALSE;
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.000000> speed <160.000000>;
	wait-for-turn turret around y-axis;
}

StartMoving()
{
	signal 2;
	spin wheelr around x-axis speed <200.000000> accelerate <15.000000>;
	spin wheell around x-axis speed <200.000000> accelerate <15.000000>;
	spin crusher around x-axis speed <200.000000> accelerate <15.000000>;
}

StopMoving()
{
	signal 2;
	stop-spin wheelr around x-axis;
	stop-spin wheell around x-axis;
	stop-spin crusher around x-axis;;
}

QueryNanoPiece(piecenum)
{
	if (spray == 0) 
	{
		piecenum = lathe1;
	}
	if (spray == 1) 
	{
		piecenum = lathe2;
	}
	spray = !spray;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	return (1);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

AimSecondary(heading, pitch)
{
	return (1);
}

QuerySecondary(piecenum)
{
	piecenum = flare;
}

AimFromSecondary(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode wheelr type NOHEATCLOUD;
		explode wheell type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | SHATTER;
		explode wheelr type NOHEATCLOUD;
		explode wheell type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode turret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode wheelr type NOHEATCLOUD;
	explode wheell type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	return (corpsetype);
}
