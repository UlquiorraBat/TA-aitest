
#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, g1, g2, g3, g4, tower, turret, sleeves,
		msl1a, msl1b, msl2a, msl2b, msl3a, msl3b, msl4a, msl4b;

static-var  gun_1;

// Signal definitions
#define SIG_AIM				2

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RestoreAfterDelay()
{
	sleep 4000;
	turn turret to y-axis <0.0> speed <30.000000>;
	turn sleeves to x-axis <0.000000> speed <30.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	
	move tower to y-axis [-10.000000] speed [10.000000];
	wait-for-move tower along y-axis;
		
	turn g2 to z-axis <0.0> speed <180.000000>;
	turn g4 to z-axis <0.0> speed <180.000000>;
	sleep 100;
	turn g1 to z-axis <0.0> speed <180.000000>;
	turn g3 to z-axis <0.0> speed <180.000000>;
	sleep 100;	
}

Create()
{
	gun_1 = 0;
	start-script SmokeUnit();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	turn g2 to z-axis <160.0> speed <180.000000>;
	turn g4 to z-axis <-160.0> speed <180.000000>;
	sleep 200;
	turn g1 to z-axis <90.0> speed <180.000000>;
	turn g3 to z-axis <-90.0> speed <180.000000>;	
	wait-for-turn g1 around z-axis;
	wait-for-turn g2 around z-axis;	
	move tower to y-axis [22.000000] speed [10.000000];
	wait-for-move tower along y-axis;
		
	turn turret to y-axis heading speed <80.000000>;
	turn sleeves to x-axis <0.000000> - pitch speed <40.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	while(TRUE)
	{
		sleep 250;
		++gun_1;
		if (gun_1 == 8)
		{
			gun_1 = 0;		
		}
	}
	
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = msl1a;
	}
	if( gun_1 == 1 )
	{
		piecenum = msl1b;
	}
	if( gun_1 == 2 )
	{
		piecenum = msl2a;
	}
	if( gun_1 == 3 )
	{
		piecenum = msl2b;
	}
	if( gun_1 == 4 )
	{
		piecenum = msl3a;
	}
	if( gun_1 == 5 )
	{
		piecenum = msl3b;
	}
	if( gun_1 == 6 )
	{
		piecenum = msl4a;
	}
	if( gun_1 == 7 )
	{
		piecenum = msl4b;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode sleeves type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode g1 type NOHEATCLOUD;
		explode g2 type NOHEATCLOUD;
		explode g3 type NOHEATCLOUD;
		explode g4 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode sleeves type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode g1 type NOHEATCLOUD;
		explode g2 type NOHEATCLOUD;
		explode g3 type NOHEATCLOUD;
		explode g4 type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode turret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode sleeves type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode g1 type NOHEATCLOUD;
	explode g2 type NOHEATCLOUD;
	explode g3 type NOHEATCLOUD;
	explode g4 type NOHEATCLOUD;
	return (corpsetype);
}
