#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, zap1, turret1, flare1, zap2, turret2, flare2;

static-var  restore_delay;

// Signal definitions
#define SIG_AIM_1		2
#define SIG_AIM_2		4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	restore_delay = 3000;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turret1 to y-axis <0.000000> speed <150.000000>;
	turn turret2 to y-axis <0.000000> speed <150.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	turn turret1 to y-axis heading speed <150.000000>;
	wait-for-turn turret1 around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <300.000000>;
	wait-for-turn turret2 around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

AimFromWeapon2(piecenum)
{
	piecenum = turret2;
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

QueryWeapon2(piecenum)
{
	piecenum = flare2;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode turret1 type NOHEATCLOUD;
		explode turret2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode turret1 type NOHEATCLOUD | FALL;
		explode turret2 type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode turret1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
