#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pelvis, torsotwist, torso, ltorso, lshoulder, lshoulderrecoil, larm,
       larmrecoil, lbarrel, lminigun, lflare, rtorso, rshoulder, rshoulderrecoil, rarm,
       rarmrecoil, rbarrel, rminigun, rflare, backpack, missiles, head,
       lleg, lboot, lfoot, rleg, rboot, rfoot, msl1, msl2;

static-var  bMoving, bAiming, gun_1, missile_1;

// Signal definitions
#define SIG_AIM_1			2
#define SIG_AIM_3			4

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			if( aiming )
			{
				if( bMoving )
				{
					turn lleg to x-axis <15.000000> speed <30.000000>;
					turn lboot to x-axis <30.000000> speed <30.000000>;
					turn rleg to x-axis <-75.000000> speed <90.000000>;
					turn rboot to x-axis <45.000000> speed <75.000000>;
					move pelvis to y-axis [3.500000] speed [3.500000];
					turn lfoot to x-axis <-45.000000> speed <30.000000>;
					turn rfoot to x-axis <15.000000> speed <15.000000>;
					turn torso to x-axis <0.000000> speed <5.000000>;
					turn torsotwist to z-axis <2.500000> speed <2.000000>;
					turn pelvis to z-axis <-5.000000> speed <4.000000>;
					move pelvis to x-axis [2.500000] speed [1.500000];
					sleep 1000;
				}
				if( bMoving )
				{
					turn lleg to x-axis <45.000000> speed <30.000000>;
					turn lboot to x-axis <15.000000> speed <15.000000>;
					turn rleg to x-axis <-90.000000> speed <15.000000>;
					turn rboot to x-axis <90.000000> speed <45.000000>;
					move pelvis to y-axis [0.000000] speed [3.500000];
					turn lfoot to x-axis <0.000000> speed <45.000000>;
					turn rfoot to x-axis <0.000000> speed <15.000000>;
					sleep 1000;
				}
				if( bMoving )
				{
					turn lleg to x-axis <15.000000> speed <30.000000>;
					turn lboot to x-axis <-30.000000> speed <45.000000>;
					turn rleg to x-axis <-15.000000> speed <75.000000>;
					turn rboot to x-axis <30.000000> speed <60.000000>;
					move pelvis to y-axis [3.500000] speed [3.500000];
					turn lfoot to x-axis <0.000000> speed <2.500000>;
					turn rfoot to x-axis <-15.000000> speed <15.000000>;
					turn torso to x-axis <10.000000> speed <15.000000>;
					turn torsotwist to z-axis <-2.500000> speed <1.000000>;
					turn pelvis to z-axis <5.000000> speed <2.000000>;
					move pelvis to x-axis [-2.500000] speed [2.000000];
					sleep 1000;
				}
				if( bMoving )
				{
					turn lleg to x-axis <-75.000000> speed <90.000000>;
					turn lboot to x-axis <45.000000> speed <75.000000>;
					turn rleg to x-axis <15.000000> speed <30.000000>;
					turn rboot to x-axis <30.000000> speed <30.000000>;
					move pelvis to y-axis [3.500000] speed [3.500000];
					turn lfoot to x-axis <15.000000> speed <15.000000>;
					turn rfoot to x-axis <-45.000000> speed <30.000000>;
					turn torso to x-axis <0.000000> speed <5.000000>;
					turn torsotwist to z-axis <-2.500000> speed <2.000000>;
					turn pelvis to z-axis <5.000000> speed <4.000000>;
					move pelvis to x-axis [-2.500000] speed [1.500000];
					sleep 1000;
				}
				if( bMoving )
				{
					turn lleg to x-axis <-90.000000> speed <15.000000>;
					turn lboot to x-axis <90.000000> speed <45.000000>;
					turn rleg to x-axis <45.000000> speed <30.000000>;
					turn rboot to x-axis <15.000000> speed <15.000000>;
					move pelvis to y-axis [0.000000] speed [3.500000];
					turn lfoot to x-axis <0.000000> speed <15.000000>;
					turn rfoot to x-axis <0.000000> speed <45.000000>;
					sleep 1000;
				}
				if( bMoving )
				{
					turn lleg to x-axis <-15.000000> speed <75.000000>;
					turn lboot to x-axis <30.000000> speed <60.000000>;
					turn rleg to x-axis <15.000000> speed <30.000000>;
					turn rboot to x-axis <-30.000000> speed <45.000000>;
					move pelvis to y-axis [3.500000] speed [3.500000];
					turn lfoot to x-axis <-15.000000> speed <15.000000>;
					turn rfoot to x-axis <0.000000> speed <2.500000>;
					turn torso to x-axis <10.000000> speed <15.000000>;
					turn torsotwist to z-axis <2.500000> speed <1.000000>;
					turn pelvis to z-axis <-5.000000> speed <2.000000>;
					move pelvis to x-axis [2.500000] speed [2.000000];
					sleep 1000;
				}
			}
			if( !aiming )
			{
				if( bMoving )
				{
					turn lleg to x-axis <15.000000> speed <30.000000>;
					turn lboot to x-axis <30.000000> speed <30.000000>;
					turn rleg to x-axis <-75.000000> speed <90.000000>;
					turn rboot to x-axis <45.000000> speed <75.000000>;
					move pelvis to y-axis [3.500000] speed [3.500000];
					turn larm to x-axis <5.000000> speed <5.000000>;
					turn rarm to x-axis <-5.000000> speed <15.000000>;
					turn lshoulder to x-axis <-15.000000> speed <7.500000>;
					turn rshoulder to x-axis <15.000000> speed <7.500000>;
					turn lfoot to x-axis <-45.000000> speed <30.000000>;
					turn rfoot to x-axis <15.000000> speed <15.000000>;
					turn torso to x-axis <0.000000> speed <5.000000>;
					turn torsotwist to z-axis <2.500000> speed <2.000000>;
					turn pelvis to z-axis <-5.000000> speed <4.000000>;
					move pelvis to x-axis [2.500000] speed [1.500000];
					sleep 1000;
				}
				if( bMoving )
				{
					turn lleg to x-axis <45.000000> speed <30.000000>;
					turn lboot to x-axis <15.000000> speed <15.000000>;
					turn rleg to x-axis <-90.000000> speed <15.000000>;
					turn rboot to x-axis <90.000000> speed <45.000000>;
					move pelvis to y-axis [0.000000] speed [3.500000];
					turn lfoot to x-axis <0.000000> speed <45.000000>;
					turn rfoot to x-axis <0.000000> speed <15.000000>;
					sleep 1000;
				}
				if( bMoving )
				{
					turn lleg to x-axis <15.000000> speed <30.000000>;
					turn lboot to x-axis <-30.000000> speed <45.000000>;
					turn rleg to x-axis <-15.000000> speed <75.000000>;
					turn rboot to x-axis <30.000000> speed <60.000000>;
					move pelvis to y-axis [3.500000] speed [3.500000];
					turn larm to x-axis <15.000000> speed <20.000000>;
					turn rarm to x-axis <25.000000> speed <20.000000>;
					turn lshoulder to x-axis <15.000000> speed <7.500000>;
					turn rshoulder to x-axis <-15.000000> speed <7.500000>;
					turn lfoot to x-axis <0.000000> speed <2.500000>;
					turn rfoot to x-axis <-15.000000> speed <15.000000>;
					turn torso to x-axis <10.000000> speed <15.000000>;
					turn torsotwist to z-axis <-2.500000> speed <1.000000>;
					turn pelvis to z-axis <5.000000> speed <2.000000>;
					move pelvis to x-axis [-2.500000] speed [2.000000];
					sleep 1000;
				}
				if( bMoving )
				{
					turn lleg to x-axis <-75.000000> speed <90.000000>;
					turn lboot to x-axis <45.000000> speed <75.000000>;
					turn rleg to x-axis <15.000000> speed <30.000000>;
					turn rboot to x-axis <30.000000> speed <30.000000>;
					move pelvis to y-axis [3.500000] speed [3.500000];
					turn larm to x-axis <-5.000000> speed <15.000000>;
					turn rarm to x-axis <5.000000> speed <5.000000>;
					turn lshoulder to x-axis <15.000000> speed <7.500000>;
					turn rshoulder to x-axis <-15.000000> speed <7.500000>;
					turn lfoot to x-axis <15.000000> speed <15.000000>;
					turn rfoot to x-axis <-45.000000> speed <30.000000>;
					turn torso to x-axis <0.000000> speed <5.000000>;
					turn torsotwist to z-axis <-2.500000> speed <2.000000>;
					turn pelvis to z-axis <5.000000> speed <4.000000>;
					move pelvis to x-axis [-2.500000] speed [1.500000];
					sleep 1000;
				}
				if( bMoving )
				{
					turn lleg to x-axis <-90.000000> speed <15.000000>;
					turn lboot to x-axis <90.000000> speed <45.000000>;
					turn rleg to x-axis <45.000000> speed <30.000000>;
					turn rboot to x-axis <15.000000> speed <15.000000>;
					move pelvis to y-axis [0.000000] speed [3.500000];
					turn lfoot to x-axis <0.000000> speed <15.000000>;
					turn rfoot to x-axis <0.000000> speed <45.000000>;
					sleep 1000;
				}
				if( bMoving )
				{
					turn lleg to x-axis <-15.000000> speed <75.000000>;
					turn lboot to x-axis <30.000000> speed <60.000000>;
					turn rleg to x-axis <15.000000> speed <30.000000>;
					turn rboot to x-axis <-30.000000> speed <45.000000>;
					move pelvis to y-axis [3.500000] speed [3.500000];
					turn larm to x-axis <25.000000> speed <20.000000>;
					turn rarm to x-axis <15.000000> speed <20.000000>;
					turn lshoulder to x-axis <-15.000000> speed <7.500000>;
					turn rshoulder to x-axis <15.000000> speed <7.500000>;
					turn lfoot to x-axis <-15.000000> speed <15.000000>;
					turn rfoot to x-axis <0.000000> speed <2.500000>;
					turn torso to x-axis <10.000000> speed <15.000000>;
					turn torsotwist to z-axis <2.500000> speed <1.000000>;
					turn pelvis to z-axis <-5.000000> speed <2.000000>;
					move pelvis to x-axis [2.500000] speed [2.000000];
					sleep 1000;
				}
			}
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justmoved )
			{
				turn lleg to x-axis <0.000000> speed <45.000000>;
				turn lboot to x-axis <0.000000> speed <45.000000>;
				turn rleg to x-axis <0.000000> speed <45.000000>;
				turn rboot to x-axis <0.000000> speed <45.000000>;
				move pelvis to y-axis [0.000000] speed [5.000000];
				turn lfoot to x-axis <0.000000> speed <15.000000>;
				turn rfoot to x-axis <0.000000> speed <15.000000>;
				turn torsotwist to z-axis <0.000000> speed <2.000000>;
				turn torso to x-axis <0.000000> speed <5.000000>;
				turn pelvis to z-axis <0.000000> speed <4.000000>;
				move pelvis to x-axis [0.000000] speed [2.000000];
				if( !aiming )
				{
					turn larm to x-axis <0.000000> speed <10.000000>;
					turn rarm to x-axis <0.000000> speed <10.000000>;
					turn lshoulder to x-axis <0.000000> speed <10.000000>;
					turn rshoulder to x-axis <0.000000> speed <10.000000>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	
	start-script MotionControl();
	
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from backpack;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from head;
			}
		}
		sleeptime = healthpercent * 25;
		if( sleeptime < 100 )
		{
			sleeptime = 100;
		}
		sleep sleeptime;
	}
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	gun_1 = 0;
	missile_1 = 0;
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

RestoreAfterDelay()
{
	sleep 4000;
	bAiming = FALSE;
	turn torso to y-axis <0.000000> speed <20.000000>;
	turn rshoulder to x-axis <0.000000> speed <20.000000>;
	turn lshoulder to x-axis <0.000000> speed <20.000000>;
	turn rarm to x-axis <0.000000> speed <20.000000>;
	turn larm to x-axis <0.000000> speed <20.000000>;
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = rflare;
	}
	if( gun_1 == 1 )
	{
		piecenum = lflare;
	}	
}

AimPrimary(heading, pitch)
{
	bAiming = TRUE;
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	turn torso to y-axis heading speed <75.000000>;
	turn lshoulder to x-axis <0.000000> - pitch speed <28.000000>;
	turn rshoulder to x-axis <0.000000> - pitch speed <28.000000>;
	turn larm to x-axis <0.000000> speed <28.000000>;
	turn rarm to x-axis <0.000000> speed <28.000000>;
	wait-for-turn torso around y-axis;
	wait-for-turn lshoulder around x-axis;
	wait-for-turn rshoulder around x-axis;
	wait-for-turn larm around x-axis;
	wait-for-turn rarm around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		turn rminigun to z-axis <0.000000> now;
		turn rminigun to z-axis <90.000000> speed <97.000000>;		
	}
	if( gun_1 == 1 )
	{
		turn lminigun to z-axis <0.000000> now;
		turn lminigun to z-axis <90.000000> speed <97.000000>;		
	}
	++gun_1;
	if( gun_1 == 2 )
	{
		gun_1 = 0;
	}
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return (1);
}

FireTertiary()
{
	++missile_1;
	if( missile_1 == 2 )
	{
		missile_1 = 0;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = missiles;
}

QueryTertiary(piecenum)
{
	if( missile_1 == 0 )
	{
		piecenum = msl1;
	}
	if( missile_1 == 1 )
	{
		piecenum = msl2;
	}	
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide lflare;
	hide rflare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode torso type NOHEATCLOUD;
		explode rshoulder type NOHEATCLOUD;
		explode lshoulder type NOHEATCLOUD;
		explode rarm type NOHEATCLOUD;
		explode larm type NOHEATCLOUD;
		explode pelvis type NOHEATCLOUD;
		explode rleg type NOHEATCLOUD;
		explode rboot type NOHEATCLOUD;
		explode lleg type NOHEATCLOUD;
		explode lboot type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode torso type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode rshoulder type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lshoulder type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rarm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode larm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode pelvis type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rboot type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lboot type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
