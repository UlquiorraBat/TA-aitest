#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, antenn1, antenn2, winga, wingb, wingc, wingd, top, turret, sleeves1, sleeves2, flare1, flare2;

static-var  gun_1, Bdeployed; 

Deploy()
{
	while (TRUE)
	{
		if(Bdeployed == TRUE)
		{
			turn sleeves1 to x-axis <90.000000> speed <10.0>;
			turn sleeves2 to x-axis <90.000000> speed <10.0>;
			spin top around y-axis speed <5.000000>;
			wait-for-turn sleeves1 around x-axis;
			return (0);
		}
	sleep 150;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	
	start-script Deploy();
	
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	gun_1 = 0;
	Bdeployed = FALSE;
	turn sleeves1 to x-axis <-90.000000> now;
	turn sleeves2 to x-axis <-90.000000> now;
	start-script SmokeUnit();
}

Activate()
{
	Bdeployed = TRUE;
	sleep 150;
}

Deactivate()
{
	sleep 150;
}

RestoreAfterDelay()
{
	sleep 5000;
	turn turret to y-axis <0.0> speed <25.000000>;
	turn sleeves1 to x-axis <90.000000> speed <50.000000>;
	turn sleeves2 to x-axis <90.000000> speed <50.000000>;
}


AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <500.000000>;
	turn sleeves1 to x-axis <0.000000> - pitch speed <500.000000>;
	turn sleeves2 to x-axis <0.000000> - pitch speed <500.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	++gun_1;
	if(gun_1 == 2)
	{
		gun_1 = 0;
	}
}

QueryPrimary(piecenum)
{
	if(gun_1 == 0)
	{
		piecenum = flare1;
	}
	if(gun_1 == 1)
	{
		piecenum = flare2;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode antenn1 type NOHEATCLOUD | SHATTER;
	explode antenn2 type NOHEATCLOUD | SHATTER;
	explode winga type NOHEATCLOUD | SHATTER;
	explode wingb type NOHEATCLOUD | SHATTER;
	explode wingc type NOHEATCLOUD | SHATTER;
	explode wingd type NOHEATCLOUD | SHATTER;
	explode top type NOHEATCLOUD | SHATTER;
	explode turret type NOHEATCLOUD | SHATTER;
	return (corpsetype);
}
