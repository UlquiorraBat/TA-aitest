#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, sleeves, barrel,
		flare, flare1, flare2, msl_sleeves, msl_turret;

static-var restore_delay, msl_1;

// Signal definitions
#define SIG_AIM_1			2
#define SIG_AIM_2			4

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(anglex, anglez)
{
	turn body to z-axis anglez speed <105.016484>;
	turn body to x-axis anglex speed <105.016484>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn body to z-axis <0.000000> speed <30.005495>;
	turn body to x-axis <0.000000> speed <30.005495>;
}

Create()
{
	hide flare;
	msl_1 = 1;
	restore_delay = 3000;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn msl_turret to y-axis <0.0> speed <100.0>;
	turn msl_sleeves to x-axis <0.000000> speed <100.0>;
	turn turret to y-axis <0.000000> speed <75.0>;
	turn sleeves to x-axis <0.000000> speed <50.0>;
}

AimFromWeapon1(piecenum)
{
	piecenum = sleeves;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	turn turret to y-axis heading speed <75.000000>;
	turn sleeves to x-axis <0.0> - pitch speed <50.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	emit-sfx 1024 from flare;
	move barrel to z-axis [-1.500000] speed [500.000000];
	sleep 100;
	move barrel to z-axis [0.000000] speed [1.000000];
}

QueryWeapon1(piecenum)
{
	piecenum = flare;
}

AimFromWeapon2(piecenum)
{
	piecenum = msl_sleeves;
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn msl_turret to y-axis heading speed <250.0>;
	turn msl_sleeves to x-axis <0.000000> - pitch speed <200.0>;
	wait-for-turn msl_turret around y-axis;
	wait-for-turn msl_sleeves around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
	while(TRUE)
	{
		sleep 125;	
		++msl_1;
		if (msl_1 == 3)
		{
			msl_1 = 1;
			return (0);		
		}
	}
}

QueryWeapon2(piecenum)
{
	if( msl_1 == 1 )
	{
		piecenum = flare1;
	}
	if( msl_1 == 2 )
	{
		piecenum = flare2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode barrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode msl_sleeves type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode barrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret type NOHEATCLOUD | FALL;
		explode msl_sleeves type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode barrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode msl_sleeves type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
