#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hull, turret,
	   lftrack, lfshadow, rftrack, rfshadow, lbtrack, lbshadow, rbtrack, rbshadow,
	   pitchturreta, flare1a, flare2a, flare3a, flare4a, barrel1a, barrel2a, barrel3a, barrel4a,
	   pitchturretb, flare1b, flare2b, flare3b, flare4b, barrel1b, barrel2b, barrel3b, barrel4b;

static-var  gun_1, gun_2, gun_3, gun_4;

// Signal definitions
#define SIG_AIM_1				2
#define SIG_AIM_2				4
#define SIG_AIM_3				8
#define SIG_AIM_4				16


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	gun_1 = 0;
	gun_2 = 0;
	gun_3 = 0;
	gun_4 = 0;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 3500;
	turn turret to y-axis <0.000000> speed <100.000000>;
	turn pitchturreta to x-axis <0.000000> speed <100.000000>;
	turn pitchturretb to x-axis <0.000000> speed <100.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	turn turret to y-axis heading speed <500.000000>;
	turn pitchturreta to x-axis <0.000000> - pitch speed <450.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn pitchturreta around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move barrel1a to z-axis [-0.800000] speed [150.000000];
		sleep 100;
		move barrel1a to z-axis [0.000000] speed [10.000000];
	}
	if( gun_1 == 1 )
	{
		move barrel2a to z-axis [-0.800000] speed [150.000000];
		sleep 100;
		move barrel2a to z-axis [0.000000] speed [10.000000];
	}
	++gun_1;
	if( gun_1 == 2 )
	{
		gun_1 = 0;
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1a;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2a;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	wait-for-turn turret around y-axis;
	wait-for-turn pitchturreta around x-axis;
	return (1);
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		move barrel3a to z-axis [-0.800000] speed [150.000000];
		sleep 100;
		move barrel3a to z-axis [0.000000] speed [10.000000];
	}
	if( gun_2 == 1 )
	{
		move barrel4a to z-axis [-0.800000] speed [150.000000];
		sleep 100;
		move barrel4a to z-axis [0.000000] speed [10.000000];
	}
	
	++gun_2;
	if( gun_2 == 2 )
	{
		gun_2 = 0;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flare3a;
	}
	if( gun_2 == 1 )
	{
		piecenum = flare4a;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
}

////

AimWeapon3(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn pitchturretb to x-axis <0.000000> - pitch speed <450.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn pitchturretb around x-axis;
	return (1);
}

FireWeapon3()
{
	if( gun_3 == 0 )
	{
		move barrel1b to z-axis [-0.800000] speed [150.000000];
		sleep 100;
		move barrel1b to z-axis [0.000000] speed [10.000000];
	}
	if( gun_3 == 1 )
	{
		move barrel2b to z-axis [-0.800000] speed [150.000000];
		sleep 100;
		move barrel2b to z-axis [0.000000] speed [10.000000];
	}
	++gun_3;
	if( gun_3 == 2 )
	{
		gun_3 = 0;
	}
}

QueryWeapon3(piecenum)
{
	if( gun_3 == 0 )
	{
		piecenum = flare1b;
	}
	if( gun_3 == 1 )
	{
		piecenum = flare2b;
	}
}

AimFromWeapon3(piecenum)
{
	piecenum = turret;
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	wait-for-turn turret around y-axis;
	wait-for-turn pitchturretb around x-axis;
	return (1);
}

FireWeapon4()
{
	if( gun_4 == 0 )
	{
		move barrel3b to z-axis [-0.800000] speed [150.000000];
		sleep 100;
		move barrel3b to z-axis [0.000000] speed [10.000000];
	}
	if( gun_4 == 1 )
	{
		move barrel4b to z-axis [-0.800000] speed [150.000000];
		sleep 100;
		move barrel4b to z-axis [0.000000] speed [10.000000];
	}
	
	++gun_4;
	if( gun_4 == 2 )
	{
		gun_4 = 0;
	}
}

QueryWeapon4(piecenum)
{
	if( gun_4 == 0 )
	{
		piecenum = flare3b;
	}
	if( gun_4 == 1 )
	{
		piecenum = flare4b;
	}
}

AimFromWeapon4(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1a type NOHEATCLOUD;
		explode barrel2b type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode pitchturreta type NOHEATCLOUD;
		explode lftrack type NOHEATCLOUD;
		explode rftrack type NOHEATCLOUD;
		explode lbtrack type NOHEATCLOUD;
		explode rbtrack type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1a type NOHEATCLOUD | FALL;
		explode barrel2a type NOHEATCLOUD | FALL;
		explode barrel3b type NOHEATCLOUD | FALL;
		explode barrel4b type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD | SHATTER;
		explode pitchturreta type NOHEATCLOUD;
		explode rftrack type FALL | NOHEATCLOUD;
		explode lbtrack type FALL | NOHEATCLOUD;
		explode rbtrack type FALL | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel1b type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel2b type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode hull type NOHEATCLOUD;
	explode barrel4a type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel3a type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lftrack type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rftrack type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode lbtrack type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rbtrack type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode turret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode pitchturreta type NOHEATCLOUD;
	return (corpsetype);
}
