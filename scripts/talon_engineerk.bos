#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  ground, pelvis, bar, torso, ruparm, rloarm, rhand, luparm,
       lloarm, lhand, lthigh, lleg, lfoot, rthigh, rleg, rfoot,
       lathe, lathe2;

static-var  spray, bMoving, Static_Var_2;


walk()
{
	while( bMoving )
	{
		if( TRUE )
		{
			turn rthigh to x-axis <0.> now;
			turn ruparm to x-axis <0.> now;
			turn lthigh to x-axis <40.> now;
			turn luparm to x-axis <0.> now;
			turn rfoot to x-axis <0.> now;
			turn rhand to x-axis <0.> now;
			turn lfoot to x-axis <25.> now;
			turn lhand to x-axis <0.> now;
			turn rthigh to x-axis <20.> speed <450.>;
			turn ruparm to x-axis <-15.> speed <300.>;
			turn lthigh to x-axis <20.> speed <450.>;
			turn luparm to x-axis <15.> speed <300.>;
			turn rfoot to x-axis <-20.> speed <450.>;
			turn lfoot to x-axis <15.> speed <225.>;
			turn lhand to x-axis <-15.> speed <300.>;
			wait-for-turn rthigh around x-axis;
		}
		if( TRUE )
		{
			turn rthigh to x-axis <40.> speed <450.>;
			turn ruparm to x-axis <-20.> speed <75.>;
			turn lthigh to x-axis <0.> speed <450.>;
			turn luparm to x-axis <30.> speed <300.>;
			turn rfoot to x-axis <0.> speed <450.>;
			turn rhand to x-axis <10.> speed <225.>;
			turn lfoot to x-axis <0.> speed <300.>;
			turn lhand to x-axis <0.> speed <300.>;
			wait-for-turn rthigh around x-axis;
		}
		if( TRUE )
		{
			turn rthigh to x-axis <50.> speed <225.>;
			turn ruparm to x-axis <-15.> speed <75.>;
			turn lthigh to x-axis <-20.> speed <450.>;
			turn luparm to x-axis <35.> speed <75.>;
			turn rfoot to x-axis <15.> speed <300.>;
			turn rhand to x-axis <15.> speed <75.>;
			turn lhand to x-axis <10.> speed <225.>;
			wait-for-turn rthigh around x-axis;
		}
		if( TRUE )
		{
			turn rthigh to x-axis <40.> speed <225.>;
			turn ruparm to x-axis <0.> speed <300.>;
			turn lthigh to x-axis <-30.> speed <225.>;
			turn luparm to x-axis <30.> speed <75.>;
			turn rfoot to x-axis <25.> speed <225.>;
			turn rhand to x-axis <0.> speed <300.>;
			turn lfoot to x-axis <10.> speed <225.>;
			turn lhand to x-axis <15.> speed <75.>;
			wait-for-turn rthigh around x-axis;
		}
		if( TRUE )
		{
			turn rthigh to x-axis <20.> speed <450.>;
			turn ruparm to x-axis <15.> speed <300.>;
			turn lthigh to x-axis <-20.> speed <225.>;
			turn luparm to x-axis <15.> speed <300.>;
			turn rfoot to x-axis <15.> speed <225.>;
			turn rhand to x-axis <-15.> speed <300.>;
			turn lfoot to x-axis <20.> speed <225.>;
			turn lhand to x-axis <10.> speed <75.>;
			wait-for-turn rthigh around x-axis;
		}
		if( TRUE )
		{
			turn rthigh to x-axis <0.> speed <450.>;
			turn ruparm to x-axis <30.> speed <300.>;
			turn lthigh to x-axis <0.> speed <450.>;
			turn luparm to x-axis <0.> speed <300.>;
			turn rfoot to x-axis <0.> speed <300.>;
			turn rhand to x-axis <0.> speed <300.>;
			turn lfoot to x-axis <0.> speed <450.>;
			turn lhand to x-axis <0.> speed <225.>;
			wait-for-turn rthigh around x-axis;
		}
		if( TRUE )
		{
			turn rthigh to x-axis <-20.> speed <450.>;
			turn ruparm to x-axis <35.> speed <75.>;
			turn lthigh to x-axis <20.> speed <450.>;
			turn luparm to x-axis <-15.> speed <300.>;
			turn rhand to x-axis <10.> speed <225.>;
			turn lfoot to x-axis <-20.> speed <450.>;
			wait-for-turn rthigh around x-axis;
		}
		if( TRUE )
		{
			turn rthigh to x-axis <-30.> speed <225.>;
			turn ruparm to x-axis <30.> speed <75.>;
			turn lthigh to x-axis <40.> speed <450.>;
			turn luparm to x-axis <-20.> speed <75.>;
			turn rfoot to x-axis <10.> speed <225.>;
			turn rhand to x-axis <15.> speed <75.>;
			turn lfoot to x-axis <0.> speed <450.>;
			turn lhand to x-axis <10.> speed <225.>;
			wait-for-turn rthigh around x-axis;
		}
		if( TRUE )
		{
			turn rthigh to x-axis <-20.> speed <225.>;
			turn ruparm to x-axis <15.> speed <300.>;
			turn lthigh to x-axis <50.> speed <225.>;
			turn luparm to x-axis <-15.> speed <75.>;
			turn rfoot to x-axis <20.> speed <225.>;
			turn rhand to x-axis <10.> speed <75.>;
			turn lfoot to x-axis <15.> speed <300.>;
			turn lhand to x-axis <15.> speed <75.>;
			wait-for-turn rthigh around x-axis;
		}
		if( TRUE )
		{
			turn rthigh to x-axis <0.> speed <450.>;
			turn ruparm to x-axis <0.> speed <300.>;
			turn lthigh to x-axis <40.> speed <225.>;
			turn luparm to x-axis <0.> speed <300.>;
			turn rfoot to x-axis <0.> speed <450.>;
			turn rhand to x-axis <0.> speed <225.>;
			turn lfoot to x-axis <25.> speed <225.>;
			turn lhand to x-axis <0.> speed <300.>;
			wait-for-turn rthigh around x-axis;
		}
		if( TRUE )
		{
			turn rthigh to x-axis <0.> speed <400.>;
			turn ruparm to x-axis <0.> speed <450.>;
			turn lthigh to x-axis <0.> speed <400.>;
			turn luparm to x-axis <0.> speed <450.>;
			turn rfoot to x-axis <0.> speed <400.>;
			turn rhand to x-axis <0.> speed <400.>;
			turn lfoot to x-axis <0.> speed <400.>;
			turn lhand to x-axis <0.> speed <400.>;
			wait-for-turn rthigh around x-axis;
		}
	}
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walk();
		}
		else
		{
			sleep 100;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script MotionControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	bMoving = FALSE;
	spray = 0;
	start-script SmokeUnit();
}

StartBuilding(Func_Var_1)
{
	set INBUILDSTANCE to 1;
	signal 4;
}

StopBuilding()
{
	signal 4;
	set-signal-mask 4;
	sleep 150;
	set-signal-mask 0;
	signal 4;
	set INBUILDSTANCE to 0;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}


QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = lathe;
	}
	if( spray == 1 )
	{
		piecenum = lathe2;
	}
	++spray;
	if( spray == 2 )
	{
		spray = 0;
	}
}

SweetSpot(piecenum)
{
	piecenum = ground;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode ground type NOHEATCLOUD;
		explode pelvis type NOHEATCLOUD;
		explode bar type NOHEATCLOUD;
		explode torso type NOHEATCLOUD;
		explode ruparm type NOHEATCLOUD;
		explode rloarm type NOHEATCLOUD;
		explode rhand type NOHEATCLOUD;
		explode luparm type NOHEATCLOUD;
		explode lloarm type NOHEATCLOUD;
		explode lhand type NOHEATCLOUD;
		explode lthigh type NOHEATCLOUD;
		explode lleg type NOHEATCLOUD;
		explode lfoot type NOHEATCLOUD;
		explode rthigh type NOHEATCLOUD;
		explode rleg type NOHEATCLOUD;
		explode rfoot type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode ground type SHATTER | NOHEATCLOUD;
		explode pelvis type SHATTER | NOHEATCLOUD;
		explode bar type SHATTER | NOHEATCLOUD;
		explode torso type SHATTER | NOHEATCLOUD;
		explode ruparm type SHATTER | NOHEATCLOUD;
		explode rloarm type SHATTER | NOHEATCLOUD;
		explode rhand type SHATTER | NOHEATCLOUD;
		explode luparm type SHATTER | NOHEATCLOUD;
		explode lloarm type SHATTER | NOHEATCLOUD;
		explode lhand type SHATTER | NOHEATCLOUD;
		explode lthigh type SHATTER | NOHEATCLOUD;
		explode lleg type SHATTER | NOHEATCLOUD;
		explode lfoot type SHATTER | NOHEATCLOUD;
		explode rthigh type SHATTER | NOHEATCLOUD;
		explode rleg type SHATTER | NOHEATCLOUD;
		explode rfoot type SHATTER | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode bar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode torso type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode rhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode lhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode bar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode torso type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode lhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	return (corpsetype);
}
